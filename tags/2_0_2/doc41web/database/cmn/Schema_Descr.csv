TABLE_NAME;TABLE_TYPE;COLUMN_NAME;COMMENTS;
VERSIONS;TABLE; ;"000 Database Module Versions of the base modules of the application
Contains the version of the schema-scripts / executed alter scripts
Must be initialized with the same version like the script executed to create the schema
DO NOT CHANGE MANUALLY - CHANGES ONLY BY VERSIONS.CSV AND ALTER SCRIPTS!!!  This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (DBObjectAccess Singleton) methods to offer Version Information to the application.";0
VERSIONS; ;MODULE;Name of the DB Module;0
VERSIONS; ;SUBVERSION;subversion  (corresponding to the cvs subversion of the schemascript);0
VERSIONS; ;VERSION;version (corresponding to the cvs version of the schemascript - therefore typically always 1);0
TRANSLATIONS;TABLE; ;"010  Contains static translations or translation templates for the apllication, per jsp_name = per page = per widget = per report = per portlet. Translations have to be stored for each language. Translations are maintained only on exactly one maintain DB stage (typically QA) and to all other stages they are only changed by distribution - never locally, nneithere by DB Tools nor by Change masks (strictly forbidden). Illeagally locally maintained translations cause distribution errors and will also get lost on distributions!!!
Translations are typically maintained once per language (not for every country = locale). But in case of differences in certain countries using the same language, they can also be maintained per country (lift - elevator). In case of cross-country translations (99,9%) set country to *, else the country iso code of the country.
The sexcondary (UNIQUE) key of a translation is: MANDANT, COMPONENT, JSP_NAME, TAG_NAME, LANGUAGE_CODE, COUNTRY_CODE !!! Change of any  of these fields is strictly forbidden, because this would caus missfunction of the distribution!!! For such cases you have to copy the row (without copiing the OBJECT_ID so it gets a new object_Id. Physical DELETES are supported for this table. The only fields changes are allowed to are TAG_VALUE and IS_ACTIVE pluss the standard fields *changed*.  This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (SBTranslation Singleton) methods to offer Translations to the application.";10
TRANSLATIONS; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;10
TRANSLATIONS; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";10
TRANSLATIONS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);10
TRANSLATIONS; ;COMPONENT;The component of an application the translation is assigned for. If JSP_NAME is * the translation is valid for all pages of the component. Same translations (JSP_NAME) for a certain page have higher priority and overrule the component global translation for their page.;10
TRANSLATIONS; ;COUNTRY_CODE;The country, if a translation is country specific (lift - elevator), otherwise set to * fror cross-country language translations;10
TRANSLATIONS; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;10
TRANSLATIONS; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;10
TRANSLATIONS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;10
TRANSLATIONS; ;IS_ACTIVE;Boolean flag (0/1), if the translation is in use (0 means, the translation is logically deleted).;10
TRANSLATIONS; ;JSP_NAME; The name of the JSP (page, report, widget, portlet) these translations are assigned to. For global translations (cross page or even cross component, set to *. Local translations always have higher priority than global translations (if both available, allows overruling local to a page);10
TRANSLATIONS; ;LANGUAGE_CODE;the language this translation is designed for.;10
TRANSLATIONS; ;MANDANT;Mandant, this translation is created for - especially for multi-mandant applications or for CMS Applications sharing one DB instance.;10
TRANSLATIONS; ;OBJECT_ID;Standard Serial ID of the entry assigned to any table potentionally changeable by the application, for easy, fast and independant handling. This vallue is typically assigned by the objectserver of the application, receiving application unique id fron the OBJECT_ID serial. In case of creations by backendprocesses, the serial ID is assigned by a standardt (CDT) trigger making handling easier outside the application. Protected by (CDT) Trigger.;10
TRANSLATIONS; ;TAG_NAME;The name of the translated fragment of the page. This is the name of the translation tag, this translation is asked for. If no transaltion is available for a tag, the application should show whe tag name in brakets. This is automatically returned by the Tag-Class and should allow to anderstand, what kind of translation is missing. So choose the name with care.;10
TRANSLATIONS; ;TAG_VALUE; The translated tag shown for this translation tag. Depending on the context the application useses this Translation Tag, the Tag may be a static text or an parrametrizable, evxpandable template.;10
TRANSLATIONS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";10
DISPLAYTEXT;TABLE; ;"011 Entity to store dynamical extendable, translated lists. Each TextType defines a new List. For Rules about TextTypes see description of TextType table. For Foundation TextTypes, applications exceptionally may add own entries with TEXT_ID >= 9000 - ONLY if they make sure, the codes do not collide (must use CODE-Prefix ""X_""). Foundation-Entries must not be changed or deleted inside applications, except IS_ACTIVE, IS_DEPRECATED and ORDER_BY. Application entries once created must not be changed or deleted except IS_ACTIVE, IS_DEPRECATED, ORDER_BY, TEXT or DESCRIPTION - all other fields are primary or secondary keys - change strictly forbidden due to distribution.  This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (DisplayTextTransformer Singleton) methods to offer DisplayTexts to the application.";11
DISPLAYTEXT; ;CODE;Code for the textfragment. Eg. Language ISO Code for countries. If there is no external code leave it empty. Applications may define their own unified codes, especially if codes are exchanged cross applications;11
DISPLAYTEXT; ;DESCRIPTION;Describe the textfragment (in english, identical in each language, for admins to help on translating).;11
DISPLAYTEXT; ;IS_ACTIVE;Flag, default value 1, is set to 0 if textfragment is not used anymore. Inactive entries are still explicitely resolved, but no more offered in Lists. To make sure, inactive/deprecated entries are added to selection list, if still used, use methods which …EnsureCode or ...EnsureId;11
DISPLAYTEXT; ;IS_DEFAULT;Flag, default value 0, is set to 1 if textfragment is default. (one per texttype_id/language), Applications may use this flag to preselect an entry inside their masks.;11
DISPLAYTEXT; ;IS_DEPRECATED;Entries that are marked as deprecated should not be used anymore. They are not offered in All-Lists (for selection lists of edit masks) except loading AllWithDeprecated (for selection lists of  search masks). Deprecated entries normally get inactive soon (also not available in selection lists of search masks anymore);11
DISPLAYTEXT; ;LANGUAGE_ISO_CODE;ISO-Code of the LANGUAGE, the TEXT is translated for. For each supported application languages, a langauge specific translation has to exist. (no fallback to entries of a different language supported);11
DISPLAYTEXT; ;ORDERBY;If used, defines a fix order for a language specific list. Low numbers before high numbers. Needs not to be dense… Order may be defined different for each language.;11
DISPLAYTEXT; ;PARENT_TEXT_ID;TextId of the parent entry (entry of master-texttype - while this entry is a slave) example - master: region, slave: country. May only be used for hierarchical defined displaytexts, requires also the textype-relation defined in TEXTYPE table consistently;11
DISPLAYTEXT; ;SEGMENT_ID;If used build groups (like mandants). NULL means global, part of every group. If a certain segment is requested, only entries of this segment plus global entries are returned.;11
DISPLAYTEXT; ;TEXT;The translated TEXT to be shown for this entry.;11
DISPLAYTEXT; ;TEXT_ID;Sequential number for every TEXTTYPE to identify one entry. All translations of the same entry have the same TEXT_ID (Must be equal in every language).;11
DISPLAYTEXT; ;TEXTTYPE_ID;Internal -Identifier for TEXTTYPE. Each TextType defines a new, independant list (except on parent texttype relations);11
DISPLAYTEXT; ;TYPE_NAME;deprecated - was prepared but not used;11
TEXTTYPE;TABLE; ;012 Text types for DISPLAYTEXT. TextTypes 0-19 and 9000- reserved for foundation modules. Texttype ID between 20 - 8999 may be used by applications. Texttypes 20-49 are historically not distributed and then need to be managed by applications alter steps. Entries above are distributed by FLR-Scripts (distribution of displaytexts only - if application not using FLR - are now also available). The application may define to also distribute entries 20-49 by configuring the distribution in their /chains/deploy/ folder. This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (DisplayTextTransformer Singleton) methods to offer TextType Informations to the application.;12
TEXTTYPE; ;PARENT_TEXTTYPE_ID;Master-Texttype for this texttype, allows builing of hierachies over texttypes (master types, slave types);12
TEXTTYPE; ;TEXTTYPE;Description of Text Type. Not shown in applications.;12
TEXTTYPE; ;TEXTTYPE_ID;Text Type Identification, sequential number, NEVER changed for an existing texttype.;12
;;;;
;;;… A D D   N E W   F I E L D S !!!!!!!;
;;;;
TEXTTYPE_REG;TABLE; ;"013 Registry storing the official usage of Text Ids or Codes of DisplayTexts in other Tables. The registration is done by a Constraint-Checking Procedure to be called from a trigger, validating that te used Text Id or Code really exists. By the way it also saves an entry documenting the usage by this table. The Constraint-Checking Procedures are ""DT_Check_Code_Constr"" and ""DT_Check_Id_Constr"". This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (DisplayTextTransformer Singleton) methods to offer TextTypeReg Informations to the application (to be implemented, once an application wants to offer).";13
TEXTTYPE_REG; ;COLUMNLEN;Length of the column referencing this textype, should be 30 for Codes and 4 for Text Ids;13
TEXTTYPE_REG; ;COLUMNNAME;The name of the column storing the Code / Text Id referencing this TextType;13
TEXTTYPE_REG; ;CREATED;The date this entry was registered;13
TEXTTYPE_REG; ;IS_CODE;if 1 the referencing column uses the Code of the TextType, if 0 it uses the Text Id;13
TEXTTYPE_REG; ;SCHEMANAME;The Schema the referencing table is located in;13
TEXTTYPE_REG; ;TABLENAME;The name of the table using this TextType;13
TEXTTYPE_REG; ;TEXTTYPE_ID; The Id of TextType referenced.;13
COUNTRY;TABLE; ;015 List of country ISO codes - INTERNAL, should not be used in program code (DISPLAYTEXT instead), deprecated and may be removed in the future. This Table is PRIVATE!!! Applications are not allowed to directly join to this table. This is a CONSTRAINT-TABLE only!!!;15
COUNTRY; ;COUNTRY;Name of the country.;15
COUNTRY; ;COUNTRY_ISO_CODE;Country ISO code.;15
LANGUAGE;TABLE; ;016 List of language ISO codes- INTERNAL, should not be used in program code (DISPLAYTEXT instead), deprecated and may be removed in the future. This Table is PRIVATE!!! Applications are not allowed to directly join to this table. This is a CONSTRAINT-TABLE only!!!;16
LANGUAGE; ;LANGUAGE;Language.;16
LANGUAGE; ;LANGUAGE_ISO_CODE;Language ISO code.;16
I18N_LANG_TRANSL_DIRECT;VIEW; ;020 View for direct translation access from external systems (e.g. other reporting systems), via a single language ISO code, especially when not running in a foundation JVM not having access to the Translation-Java-Component, but willing to use the Foundation Translations. This View supports ONLY DIRECT translations (not higher lever defaults across pages/components). So all translations used by external modules via this view have to be added explicitly for this external module.;20
I18N_LANG_TRANSL_DIRECT; ;COMPONENT;see description of TRANSLATION table;20
I18N_LANG_TRANSL_DIRECT; ;LANGUAGE_CODE;see description of TRANSLATION table;20
I18N_LANG_TRANSL_DIRECT; ;MANDANT;see description of TRANSLATION table;20
I18N_LANG_TRANSL_DIRECT; ;MODULE;see description of TRANSLATION table, field JSP_NAME;20
I18N_LANG_TRANSL_DIRECT; ;TAG_NAME;see description of TRANSLATION table;20
I18N_LANG_TRANSL_DIRECT; ;TAG_VALUE;see description of TRANSLATION table;20
I18N_LOCALE_SPEC_TRANSL_DIRECT;VIEW; ;021 View for direct translation access from external systems (e.g. other reporting systems), via locale (langage ISO code + country ISO code), especially when not running in a foundation JVM not having access to the Translation-Java-Component, but willing to use the Foundation Translations. This View supports ONLY DIRECT translations (not higher lever defaults across pages/components). So all translations used by external modules via this view have to be added explicitly for this external module.;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;COMPONENT;see description of TRANSLATION table;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;COUNTRY_CODE;see description of TRANSLATION table;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;LANGUAGE_CODE;see description of TRANSLATION table;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;MANDANT;see description of TRANSLATION table;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;MODULE;see description of TRANSLATION table, field JSP_NAME;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;TAG_NAME;see description of TRANSLATION table;21
I18N_LOCALE_SPEC_TRANSL_DIRECT; ;TAG_VALUE;see description of TRANSLATION table;21
DISPLAYTEXT_APPL_TRL_QA;VIEW; ;025 Quality Assurance View, for checking the Quality of translations maintained, shows  number of translations for each language (across texttypes, NON foundation display texts), numbers should be equal. This View is PRIVATE!!! Applications are not allowed to directly join to this table. For administraition only.;25
DISPLAYTEXT_APPL_TRL_QA; ;COUNT;number of translations available for this language;25
DISPLAYTEXT_APPL_TRL_QA; ;IS_ACTIVE;number of active entries;25
DISPLAYTEXT_APPL_TRL_QA; ;LANGUAGE;Name of the language, looked up;25
DISPLAYTEXT_APPL_TRL_QA; ;LANGUAGE_ISO_CODE;ISO code of the language;25
DISPLAYTEXT_APPL_TRL_QA_DET;VIEW; ;026 Quality Assurance View, for checking the Quality of translations maintained, shows  number of translations for each language (for each texttypes, NON foundation display texts), numbers should be equal. This View is PRIVATE!!! Applications are not allowed to directly join to this table. For administraition only.;26
DISPLAYTEXT_APPL_TRL_QA_DET; ;COUNT;number of translations available for this language;26
DISPLAYTEXT_APPL_TRL_QA_DET; ;IS_ACTIVE;number of active entries;26
DISPLAYTEXT_APPL_TRL_QA_DET; ;LANGUAGE;Name of the language, looked up;26
DISPLAYTEXT_APPL_TRL_QA_DET; ;LANGUAGE_ISO_CODE;ISO code of the language;26
DISPLAYTEXT_APPL_TRL_QA_DET; ;TEXTTYPE_ID;the Id of the TextType;26
DISPLAYTEXT_FDT_TRL_QA;VIEW; ;027 Quality Assurance View, for checking the Quality of translations maintained, shows  number of translations for each language (across texttypes, foundation display texts, only translated texttypes), numbers should be equal. This View is PRIVATE!!! Applications are not allowed to directly join to this table. For administraition only.;27
DISPLAYTEXT_FDT_TRL_QA; ;COUNT;number of translations available for this language;27
DISPLAYTEXT_FDT_TRL_QA; ;IS_ACTIVE;number of active entries;27
DISPLAYTEXT_FDT_TRL_QA; ;LANGUAGE;Name of the language, looked up;27
DISPLAYTEXT_FDT_TRL_QA; ;LANGUAGE_ISO_CODE;ISO code of the language;27
DISPLAYTEXT_FDT_TRL_QA; ;UNTR_LAN_COU_COUNT;"Number of entries not yet translated (only added in english, translation should be requested by the application, if required), entries marked as untranslated by leading colon "" : """;27
DISPLAYTEXT_FDT_TRL_QA_DET;VIEW; ;028 Quality Assurance View, for checking the Quality of translations maintained, shows  number of translations for each language (for each texttypes, foundation display texts, only translated texttypes), numbers should be equal. This View is PRIVATE!!! Applications are not allowed to directly join to this table. For administraition only.;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;COUNT;number of translations available for this language;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;IS_ACTIVE;number of active entries;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;LANGUAGE;Name of the language, looked up;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;LANGUAGE_ISO_CODE;ISO code of the language;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;TEXTTYPE_ID;the Id of the TextType;28
DISPLAYTEXT_FDT_TRL_QA_DET; ;UNTR_LAN_COU_COUNT;"Number of entries not yet translated (only added in english, translation should be requested by the application, if required), entries marked as untranslated by leading colon "" : """;28
WEBMETRIX;TABLE; ;030 This table is designed to store User Actions (and automatic process actions) happening inside an application. The actions logged are classified/assigned to component and there defined as separate actions. Therfore the basic key separating different logs are the COMPONENT and ACTION columns. The application defines componentss and actions and defines how for these components/actions the DATA* columns are used (should be documented by the application). DATA1..5 should be used to log String informations, DATA_ID1..3 to log object_Ids for corresponding table rows (DATA_ID1 prefferred for the primary row the entry is assigned to) DATA_DATE for a related date (NOT THE CURRENT, this is store in CREATED/VMTS fields). So use type matching columns. String-Fields DON'T use property syntax, that can no t be aggregated on (xxx=info1, yyy=info2...), ONE information per column. DO NOT USE this table to store DEBUGGING infos, use the logfiles instead!!!;30
WEBMETRIX; ;ACTIONTYPE;2nd key column to classify a set of webmetrix data, an action inside a component logged. USE ONLY in connection with COMPONENT.;30
WEBMETRIX; ;CLASSNAME;automatically logs the class used to log this entry. Each application should use it's own subclass of SimpleLogEntry (or extended subclasses), overloading the key method, returning it's own key for their class.;30
WEBMETRIX; ;CLIENT;optional subclassification, may be used to subclassify the client logging this information (e.g. a certain portlet or JSP). The application defines if/how this client is filled.;30
WEBMETRIX; ;COMPONENT;the component these entries belong to, 1st key for a set of entries;30
WEBMETRIX; ;CREATED;the timestamp this entry was created (raw DB timestamp), may be later than the timestamp the entry was logged, especially if ther was a problem and the entry was first log to a fllback logfile and later loaded to the database. The real creation time of the log is the VMTS;30
WEBMETRIX; ;CREATED_M;automatically truncated db timestamp, truncated to the begin of the month, indexed for performant aggregations by month, char representation, format YYYY-MM;30
WEBMETRIX; ;DATA_DATE;optional, a related date, related to this entry (different to the current date, e.g. a like a future planned order date), concreted usage defined by each component/action separately, by the application;30
WEBMETRIX; ;DATA_DSP_CODE;optional, a related DisplayText code, e.g. a timzone code, country code, langage code, concreted usage defined by each component/action separately, by the application;30
WEBMETRIX; ;DATA_ID1;optional, primary related object_id, concreted usage defined by each component/action separately, by the application;30
WEBMETRIX; ;DATA_ID2;optional, further related object_Id, concrete usage...;30
WEBMETRIX; ;DATA_ID3;optional, further related object_Id, concrete usage...;30
WEBMETRIX; ;DATA_NUMBER1;optional number related to this entry, e.g. a count or a quantity, concrete usage...;30
WEBMETRIX; ;DATA_NUMBER2;optional number related to this entry, e.g. a count or a quantity, concrete usage…;30
WEBMETRIX; ;DATA_NUMBER3;optional number related to this entry, e.g. a count or a quantity, concrete usage…;30
WEBMETRIX; ;DATA_NUMBER4;optional number related to this entry, e.g. a count or a quantity, concrete usage…;30
WEBMETRIX; ;DATA_NUMBER5;optional number related to this entry, e.g. a count or a quantity, concrete usage…;30
WEBMETRIX; ;DATA_TTYPE_ID;optional, a related DisplayText textId, e.g. a timzone Id, salutation_Id, etc., concreted usage defined by each component/action separately, by the application;30
WEBMETRIX; ;DATA1;primary text key for this index (up to 750 characters, fully indexed for fast aggregations), concrete usage…;30
WEBMETRIX; ;DATA2;optional further related text key (e.g. a name, title, etc.), concrete usage...;30
WEBMETRIX; ;DATA3;optional further related text key, concrete usage…;30
WEBMETRIX; ;DATA4;optional further related text key, concrete usage…;30
WEBMETRIX; ;DATA5;optional further related text key, concrete usage…;30
WEBMETRIX; ;EXECUSER;the user CWID, causing this log (may be a system CWID in case of an internal process logged), may be different of the USERS cwid if the system supports masquerading;30
WEBMETRIX; ;LOGCHANNEL;the name of the logical channel the entry was logged by, filled automatically;30
WEBMETRIX; ;LOGCHANNELNO;the logical channel number the entry was logged by, filled automatically;30
WEBMETRIX; ;MACHINE;automatically logs the hostname of the host writing this entry;30
WEBMETRIX; ;MANDANT;If the applicatiion supports multipla MANDANTs, the application may store here the mandant, optional…;30
WEBMETRIX; ;MODEL;additional classification column to differentiate certain implementation variants of a function, optional;30
WEBMETRIX; ;OBJECT_ID;automatically assigned object_Id, primary key, not to be set by the application;30
WEBMETRIX; ;PHYSCHANNELNO;the number of the phys channel, this entry was logged to.;30
WEBMETRIX; ;REGION;the region, the entry belongs to, if the application supports different regions, e.g. NAFTA, EMEA, APAC, …optional;30
WEBMETRIX; ;THREAD;the name of the thread logging this information (for e.g. finding corresponding debug logging in logfiles);30
WEBMETRIX; ;USERS;the user CWID, causing this log (may be a system CWID in case of an internal process logged), may be different of the EXECUSER cwid if the system supports masquerading;30
WEBMETRIX; ;VMTS;the timestamp of the java virtual machine, this entry was created at.;30
WEBMETRIX; ;VMTS_M;the timestamp of the java virtual machine, this entry was created at, truncated to the begin of the month, indexed for performant aggregations by month, char representation, format YYYY-MM;30
PERFORMANCE;TABLE; ;031 This table is designed to store Performance Messures detected at specified mesure points inside the application via Debug-Watches. The actions logged are classified/assigned to component and there defined as separate actions. Therfore the basic key separating different logs are the COMPONENT and ACTION columns. The application defines components and actions and defines how ADDINFO as additional comment as well as the meaning of a related DATA_DATE is filled (both optional).;31
PERFORMANCE; ;ACTIONTYPE;2nd key column to classify a set of webmetrix data, an action inside a component logged. USE ONLY in connection with COMPONENT.;31
PERFORMANCE; ;ADDINFO;addition informations for this messure entry (e.g. conditions);31
PERFORMANCE; ;CLASSNAME;automatically logs the class used to log this entry. Each application should use it's own subclass of SimpleLogEntry (or extended subclasses), overloading the key method, returning it's own key for their class.;31
PERFORMANCE; ;COMPONENT;the component these entries belong to, 1st key for a set of entries;31
PERFORMANCE; ;CREATED;the timestamp this entry was created (raw DB timestamp), may be later than the timestamp the entry was logged, especially if ther was a problem and the entry was first log to a fllback logfile and later loaded to the database. The real creation time of the log is the VMTS;31
PERFORMANCE; ;DATA_DATE;optional, a related date, related to this entry (different to the current date, e.g. a like a future planned order date), concreted usage defined by each component/action separately, by the application;31
PERFORMANCE; ;EXECUSER;the user CWID, causing this log (may be a system CWID in case of an internal process logged), may be different of the USERS cwid if the system supports masquerading;31
PERFORMANCE; ;KEYID;ObectId of a related Key-Object the performance is messured on;31
PERFORMANCE; ;KEYNAME;Name of a related Key-Object the performance is messured on;31
PERFORMANCE; ;LOGCHANNEL;the name of the logical channel the entry was logged by, filled automatically;31
PERFORMANCE; ;LOGCHANNELNO;the logical channel number the entry was logged by, filled automatically;31
PERFORMANCE; ;MACHINE;automatically logs the hostname of the host writing this entry;31
PERFORMANCE; ;MESSAGE;Primary message / description for this messure, e.g. if you messure multiple steps with the same watch, ech should have ist own step message, e.g.: start, init, execute and finalize;31
PERFORMANCE; ;MILLISSTEP;The millisecend since the last messure poin on this watch.;31
PERFORMANCE; ;MILLISSUM;The sum of milis since the start of the watch.;31
PERFORMANCE; ;OBJECT_ID;automatically assigned object_Id, primary key, not to be set by the application;31
PERFORMANCE; ;PHYSCHANNELNO;the number of the phys channel, this entry was logged to.;31
PERFORMANCE; ;REFID;Additional reference Id, e.g. a parent or child related (optional).;31
PERFORMANCE; ;REFNAME;The name of an additional referenced object (optional).;31
PERFORMANCE; ;SUBKEYNAME; Subclassification of the key object, e.g. a certain usage of the key object.;31
PERFORMANCE; ;THREAD;the name of the thread logging this information (for e.g. finding corresponding debug logging in logfiles);31
PERFORMANCE; ;USERS;the user CWID, causing this log (may be a system CWID in case of an internal process logged), may be different of the EXECUSER cwid if the system supports masquerading;31
PERFORMANCE; ;VMTS;the timestamp of the java virtual machine, this entry was created at.;31
WEBM_CHAINS_DAY_ALL;VIEW; ;035 View extracting the Chain execution times from the Webmetrix for the current and the last month aggregating the executions for one day, one entry per day.;35
WEBM_CHAINS_DAY_ALL; ;EX_AVG_INT_M;Average time between the start of two Chains in minutes overall.;35
WEBM_CHAINS_DAY_ALL; ;EX_AVG_S;Average execution time over all chains in seconds;35
WEBM_CHAINS_DAY_ALL; ;EX_DAY;The day, the Chains were executed;35
WEBM_CHAINS_DAY_ALL; ;EX_FIRST;The Timestamp of the first execution of a Chain on this day.;35
WEBM_CHAINS_DAY_ALL; ;EX_LAST;The Timestamp of the last execution of a Chain on this day.;35
WEBM_CHAINS_DAY_ALL; ;EX_MANUAL;Number of manual executions of a chain (by a user, at the server, not by cron);35
WEBM_CHAINS_DAY_ALL; ;EX_MAX_S;Max execution time of a chain for this day in seconds.;35
WEBM_CHAINS_DAY_ALL; ;EX_MIN_S;Min execution time of a chain for this day in seconds.;35
WEBM_CHAINS_DAY_ALL; ;EX_NUM;Sum of Chain executions overall;35
WEBM_CHAINS_DAY_ALL; ;EX_NUM_DAY;Sum of Chain executions overall expected - approximated, especially interesting for the current day.;35
WEBM_CHAINS_DAY_ALL; ;HOST_NUM;Number of different hosts, the chains where executed by (typically only 1);35
WEBM_CHAINS_DAY_ALL; ;HOST1;The alphabetic first name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;35
WEBM_CHAINS_DAY_ALL; ;HOST2;The alphabetic last name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;35
WEBM_CHAINS_DAY_ALL; ;PROC_NUM;Number of different chains executed this day.;35
WEBM_CHAINS_DAY_ALL; ;PROC1;The alphabetic first name of the list of chains aggregated.;35
WEBM_CHAINS_DAY_ALL; ;PROC2;The alphabetic last name of the list of chains aggregated.;35
WEBM_CHAINS_DAY_EACH;VIEW; ;036 View extracting the Chain execution times from the Webmetrix for the current and the last month aggregating the executions for one day, one entry for each day and Chain;36
WEBM_CHAINS_DAY_EACH; ;CHAIN;The name of the chain executed.;36
WEBM_CHAINS_DAY_EACH; ;EX_AVG_INT_M;Average time between the start of two Chains in minutes overall.;36
WEBM_CHAINS_DAY_EACH; ;EX_AVG_S;Average execution time in seconds;36
WEBM_CHAINS_DAY_EACH; ;EX_DAY;The day, the Chain was executed;36
WEBM_CHAINS_DAY_EACH; ;EX_FIRST;The Timestamp of the first execution of the Chain on this day.;36
WEBM_CHAINS_DAY_EACH; ;EX_LAST;The Timestamp of the last execution of the Chain on this day.;36
WEBM_CHAINS_DAY_EACH; ;EX_MANUAL;Number of manual executions of a chain (by a user, at the server, not by cron);36
WEBM_CHAINS_DAY_EACH; ;EX_MAX_S;Max execution time of a chain for this day in seconds.;36
WEBM_CHAINS_DAY_EACH; ;EX_MIN_S;Min execution time of a chain for this day in seconds.;36
WEBM_CHAINS_DAY_EACH; ;EX_NUM;Sum of Chain executions;36
WEBM_CHAINS_DAY_EACH; ;EX_NUM_DAY;Sum of Chain executions expected - approximated, especially interesting for the current day.;36
WEBM_CHAINS_DAY_EACH; ;HOST_NUM;Number of different hosts, the chains where executed by (typically only 1);36
WEBM_CHAINS_DAY_EACH; ;HOST1;The alphabetic first name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;36
WEBM_CHAINS_DAY_EACH; ;HOST2;The alphabetic last name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;36
WEBM_CHAINS_MONTH_ALL;VIEW; ;037  View extracting the Chain execution times from the Webmetrix (unlimited)  aggregating the executions for one month, one entry per month.;37
WEBM_CHAINS_MONTH_ALL; ;EX_AVG_INT_M;Average time between the start of two Chains in minutes overall.;37
WEBM_CHAINS_MONTH_ALL; ;EX_AVG_S;Average execution time over all chains in seconds;37
WEBM_CHAINS_MONTH_ALL; ;EX_FIRST;The Timestamp of the first execution of a Chain on this month.;37
WEBM_CHAINS_MONTH_ALL; ;EX_LAST;The Timestamp of the last execution of a Chain on this month;37
WEBM_CHAINS_MONTH_ALL; ;EX_MANUAL;Number of manual executions of a chain (by a user, at the server, not by cron);37
WEBM_CHAINS_MONTH_ALL; ;EX_MAX_S;Max execution time of a chain for this day in seconds.;37
WEBM_CHAINS_MONTH_ALL; ;EX_MIN_S;Min execution time of a chain for this day in seconds.;37
WEBM_CHAINS_MONTH_ALL; ;EX_MONTH;The month, the Chains were executed;37
WEBM_CHAINS_MONTH_ALL; ;EX_NUM;Sum of Chain executions overall;37
WEBM_CHAINS_MONTH_ALL; ;EX_NUM_DAY;Sum of Chain executions overall expected - approximated, especially interesting for the current month;37
WEBM_CHAINS_MONTH_ALL; ;HOST_NUM;Number of different hosts, the chains where executed by (typically only 1);37
WEBM_CHAINS_MONTH_ALL; ;HOST1;The alphabetic first name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;37
WEBM_CHAINS_MONTH_ALL; ;HOST2;The alphabetic last name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;37
WEBM_CHAINS_MONTH_ALL; ;PROC_NUM;Number of different chains executed this month;37
WEBM_CHAINS_MONTH_ALL; ;PROC1;The alphabetic first name of the list of chains aggregated.;37
WEBM_CHAINS_MONTH_ALL; ;PROC2;The alphabetic last name of the list of chains aggregated.;37
WEBM_CHAINS_MONTH_EACH;VIEW; ;038 View extracting the Chain execution times from the Webmetrix (unlimited) aggregating the executions for one month, one entry for each month and Chain;38
WEBM_CHAINS_MONTH_EACH; ;CHAIN;The name of the chain executed.;38
WEBM_CHAINS_MONTH_EACH; ;EX_AVG_INT_M;Average time between the start of two Chains in minutes overall.;38
WEBM_CHAINS_MONTH_EACH; ;EX_AVG_S;Average execution time in seconds;38
WEBM_CHAINS_MONTH_EACH; ;EX_FIRST;The Timestamp of the first execution of the Chain on this month;38
WEBM_CHAINS_MONTH_EACH; ;EX_LAST;The Timestamp of the last execution of the Chain on this month;38
WEBM_CHAINS_MONTH_EACH; ;EX_MANUAL;Number of manual executions of a chain (by a user, at the server, not by cron);38
WEBM_CHAINS_MONTH_EACH; ;EX_MAX_S;Max execution time of a chain for this month in seconds.;38
WEBM_CHAINS_MONTH_EACH; ;EX_MIN_S;Min execution time of a chain for this month in seconds.;38
WEBM_CHAINS_MONTH_EACH; ;EX_MONTH;The month, the Chain was executed;38
WEBM_CHAINS_MONTH_EACH; ;EX_NUM;Sum of Chain executions;38
WEBM_CHAINS_MONTH_EACH; ;EX_NUM_DAY;Sum of Chain executions expected - approximated, especially interesting for the current month;38
WEBM_CHAINS_MONTH_EACH; ;HOST_NUM;Number of different hosts, the chains where executed by (typically only 1);38
WEBM_CHAINS_MONTH_EACH; ;HOST1;The alphabetic first name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;38
WEBM_CHAINS_MONTH_EACH; ;HOST2;The alphabetic last name of the list of hosts the chains where executed by..Typically the  chains are executed only on one host (execpt in case of a failover/switrch).;38
SESSION_DATA;TABLE; ;040 This table stores Persistent Sessions. It also store components user specific configurations.;40
SESSION_DATA; ;CHANGED;The timestamp the stored session was touched last at the db.;40
SESSION_DATA; ;COMPONENT;The component the data is related to - if the component is not null, this data is a user specific configuration for a component (very high end-of-life, cross browser windows), otherwise regular worflow session data.(very short end-of-life, one for each browser window);40
SESSION_DATA; ;CREATED;The timestamp the session was created at the DB;40
SESSION_DATA; ;DATA;The Session-Contend as serialized (file stored to string) Property object.;40
SESSION_DATA; ;ENDOFLIFE;timestamp, when the session data expires;40
SESSION_DATA; ;ID;The ID this session is identified by (together with the component, if the component is not null);40
SESSION_DATA; ;OBJECT_ID;The object_Id of this entry.;40
SESSION_DATA; ;TIMETOLIVE;the time the entry lifes (in seconds used to calculate end-of-life);40
SEARCHKEYS;TABLE; ;045 The searchkey table may be used to store a free text separation of selcted columns of master table rows (and neighbour tables) to search efficient for certain words assigned to the row of the master table. Each mastertable defines a search domain, in which you can search for th master tables rows. The searchkey search implements a special version of free text search. Each word is searched as prefix. A match is returned, if all searched words mach as prefixes on words assigned to a table row. Words with >= 3 letters are searched as prefix, words with 2 letters at least exact (prefix would cause to many matches) and single letters are ignored. The searchkey search allows automatic detection of nationalized numeric dates and numbers and stores them in a unified format in her table (allows e.g. germans to search for spanish dates and numbers even not knowing in which format they occur inside the text). Searches can limit on even a subset or single columns odf the domain. You can offer a full domain search or only a search on a title (even if there are more columns indexed), The searchkey index is updated synchronously, live.;45
SEARCHKEYS; ;CHANGED;The timestamp the entry was touched last at the db.;45
SEARCHKEYS; ;CNT; The count, how often a word occurs n a coulumn value getting part of the index.;45
SEARCHKEYS; ;COLUMNNAME;The Column name of the neighbour table, the word was indexed from.;45
SEARCHKEYS; ;CREATED;The timestamp the entry was created at the DB;45
SEARCHKEYS; ;IS_INACTIVE;Flag marking inactive (deleted) words no more part of the index. Active entries have value NULL not becomng part of the DELETE DB-Index. Inactive entries are flagged 1.;45
SEARCHKEYS; ;MASTER_ID;The ObjectId of the row inside the master table, the search value is related to (the target row you search for);45
SEARCHKEYS; ;MASTER_ID_TYPE;" The Search-Domain Character. Each Character identifies exactly one domain. The uppercase version of the Character classifies separated words searched as prefix. The lowercase version of the character defines unseparated ""words"", because separation makes no sense like for Article-Numnbers or Substance-Numbers";45
SEARCHKEYS; ;OBJECT_ID;The object_Id of this entry.;45
SEARCHKEYS; ;SEARCHVALUE; The word that was indexed and the user may search for (exact or with prefix, depending if the MASTER_ID_TYPE is upper or lower case);45
SEARCHKEYS; ;TABLENAME;The Table name of the neighbour table, the word was indexed from.;45
SEARCHKEYS; ;TABLEROW_ID;The objectId of the neighbor table, the word was indexed from.;45
SEARCHKEYS_DELETE_STATS;VIEW; ;046 Statistic-View about the searchkeys, to decide, if a physical delete of logical deleted entries (with Index-Rebuilds) makes sense. Physical CleanUp may make sense e.g. if more than 10% of the entries are deleted.;46
SEARCHKEYS_DELETE_STATS; ;DELETED;Number of deleted rows.;46
SEARCHKEYS_DELETE_STATS; ;DELETED_PERC;Percentage of deleted rows.;46
SEARCHKEYS_DELETE_STATS; ;NUMROWS;Number of rows inside the index overall (estimated);46
SEARCHKEYS_STATS;VIEW; ;047 Statistic-View about the searchkeys, to decide, if a physical delete of logical deleted entries (with Index-Rebuilds) makes sense. Physical CleanUp may make sense e.g. if more than 10% of the entries are deleted.;46
SEARCHKEYS_STATS;;MASTER_ID_TYPE;one-character-domain-key, see the searchkey table;
SEARCHKEYS_STATS;;TABLENAME;The Table name of the neighbour table, the word was indexed from.;
SEARCHKEYS_STATS;;IS_MASTER;1 if the table is the master-table of the search-domain (the other tables of the domain are related to), else 0 (slave tables);
SEARCHKEYS_STATS;;DELETED;Number of Rows DELETED;
SEARCHKEYS_STATS;;Cnt_Rows;Number Rows (entries) inside the database (includes deleted rows);
SEARCHKEYS_STATS;;Cnt_All;Sum of the Counts (Column CNT) of all Rows (deleted rows have CNT 0);
SCHEDULED_TASKS;TABLE; ;050 Controll table of the TaskScheduler, dicuments  and synchronizes running tasks. On application start each application instance synchronizes once the configuration received via properties to this table (init of the TAS), Then it starts the processing (by a demon thread)  of the list of tasks it received from the properties. After execution the LAST_EXECUTION time is stored in this table. Together with the INTERVAL it is used to devide, when the task has to be executed next. The EXECUTION_TIME is always ONLY incremented by exactly INTERVAL to enforce FIXED execution times (not floating);50
SCHEDULED_TASKS; ;FULL_CLASSNAME;The full class name of the class executed for this task.;50
SCHEDULED_TASKS; ;INTERVAL;execution interval of this task in milliseconds;50
SCHEDULED_TASKS; ;LAST_EXECUTION;last execution of this task (rounded by INTERVALL to implement sticky execution times);50
SCHEDULED_TASKS; ;LIMITED_MACHINE;"A machine hostname the execution of this task is temporary limited to  This field may ALSO be used to temporary disable a task (set value to ""disabled"")";50
SCHEDULED_TASKS; ;OBJECT_ID;automatically assigned object_Id, primary key, not to be set by the application;50
SCHEDULED_TASKS; ;PARAMETERS;The task parameters configuring the task execution like specified at the applications properties.;50
SCHEDULED_TASKS; ;START_TIME;The last start time of the task,;50
SCHEDULED_TASKS; ;STATUS;Numeric status of the last execution, 2 = success, for other values see the TAS-Class;50
SCHEDULED_TASKS; ;TASK_NAME;Name of the Task as used in the TAS class and ist property config.;50
NAVIGATION;TABLE; ;060 to be documented by a Navigation developer…;60
NAVIGATION; ;ACCESS_CHECKER; ;60
NAVIGATION; ;CHANGED; ;60
NAVIGATION; ;CHANGEDBY; ;60
NAVIGATION; ;CHANGEDON; ;60
NAVIGATION; ;CREATED; ;60
NAVIGATION; ;CREATEDBY; ;60
NAVIGATION; ;CREATEDON; ;60
NAVIGATION; ;CWID; ;60
NAVIGATION; ;GROUPS; ;60
NAVIGATION; ;INFORMATION; ;60
NAVIGATION; ;LINK; ;60
NAVIGATION; ;LINK_BUILDER; ;60
NAVIGATION; ;NAV_COMPONENT; ;60
NAVIGATION; ;NAV_CONTEXT; ;60
NAVIGATION; ;NAVIGATION_BUILDER; ;60
NAVIGATION; ;NAV_TAG; ;60
NAVIGATION; ;OBJECT_ID; ;60
NAVIGATION; ;PARENT_ID; ;60
NAVIGATION; ;POSITION; ;60
NAVIGATION; ;POST_PARAMETERS; ;60
NAVIGATION; ;TARGET; ;60
NAVIGATION; ;TO_BE_TRANSLATED; ;60
NAVIGATION; ;USERCHANGED; ;60
NEWS;TABLE; ;070 Administration of Web-News. (Head informations);70
NEWS; ;CHANGED;Date of last change to this record, set by trigger.;70
NEWS; ;CHANGEDBY;CWID of the modifier.;70
NEWS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);70
NEWS; ;CREATED;Creation date of this record, set by trigger.;70
NEWS; ;CREATEDBY;CWID of the creator.;70
NEWS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;70
NEWS; ;ISMANDATORY;Flag, value 0 set to 1 if news is mandatory.;70
NEWS; ;LIMITED_TO;A classification for the news limiting the news to only a certain group of users (assigned to this classification). If null, the news is global for all users.;70
NEWS; ;OBJECT_ID;Internal - Distinct identifier for every record.;70
NEWS; ;OBJECTSTATE_ID;Internal -Identifier for OBJECTSTATE. State of the news.;70
NEWS; ;OBJECTSTATEINTERNAL_ID;Internal -Identifier for OBJECTSTATE.  Creation state of the record.;70
NEWS; ;SEGMENT_ID;Internal - Identifier for DISPLAYTEXT TEXT_ID. Text type is segment.;70
NEWS; ;TOPIC;Topic of news. (Group name);70
NEWS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";70
NEWS; ;VALID_FROM;Valid from.;70
NEWS; ;VALID_TO;Valid to.;70
NEWS_DATA;TABLE; ;071 Administration of Web-News. (News title and text);71
NEWS_DATA; ;CHANGED;Date of last change to this record, set by trigger.;71
NEWS_DATA; ;CHANGEDBY;CWID of the modifier.;71
NEWS_DATA; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);71
NEWS_DATA; ;CREATED;Creation date of this record, set by trigger.;71
NEWS_DATA; ;CREATEDBY;CWID of the creator.;71
NEWS_DATA; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;71
NEWS_DATA; ;LANGUAGE_CODE;Internal -Identifier for LANGUAGE.;71
NEWS_DATA; ;NEWS_ID;Internal -Identifier for NEWS.;71
NEWS_DATA; ;OBJECT_ID;Internal - Distinct identifier for every record.;71
NEWS_DATA; ;TEXT;News text.;71
NEWS_DATA; ;TITLE;News title.;71
NEWS_DATA; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";71
NEWS_READ_BY;TABLE; ;072 Administration of Web-News. (Protocol of users, they read the news.);72
NEWS_READ_BY; ;CHANGED;Date of last change to this record, set by trigger.;72
NEWS_READ_BY; ;CHANGEDBY;CWID of the modifier.;72
NEWS_READ_BY; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);72
NEWS_READ_BY; ;CREATED;Creation date of this record, set by trigger.;72
NEWS_READ_BY; ;CREATEDBY;CWID of the creator.;72
NEWS_READ_BY; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;72
NEWS_READ_BY; ;NEWS_ID;Internal -Identifier for NEWS.;72
NEWS_READ_BY; ;OBJECT_ID;Internal - Distinct identifier for every record.;72
NEWS_READ_BY; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";72
NEWS_READ_BY; ;USER_ID;Internal -Identifier for USERS.;72
OBJECTSTATE;TABLE; ;073 List of Objectstates. Normally they are only two states (active = 1, inactive = 2).;73
OBJECTSTATE; ;OBJECTSTATE;Text of objectstate.;73
OBJECTSTATE; ;OBJECTSTATE_ID;Internal - Distinct identifier for every record. Not global unique, it's not an object_Id (more like a text_Id / textType_Id of the DisplayTexts);73
WEBINFO;TABLE; ;080 Please ask Steffen Deutschmann… or a developer using this component…;80
WEBINFO; ;CHANGED; ;80
WEBINFO; ;CHANGEDBY; ;80
WEBINFO; ;CHANGEDON; ;80
WEBINFO; ;COMPONENT; ;80
WEBINFO; ;COMP_TYPE; ;80
WEBINFO; ;CREATED; ;80
WEBINFO; ;CREATEDBY; ;80
WEBINFO; ;CREATEDON; ;80
WEBINFO; ;DESCRIPTION; ;80
WEBINFO; ;DISPLAY_POS; ;80
WEBINFO; ;EMAIL_AVAIL_BODY; ;80
WEBINFO; ;EMAIL_NOT_AVAIL_BODY; ;80
WEBINFO; ;EMAIL_STATIC_FLG; ;80
WEBINFO; ;EMAIL_TO; ;80
WEBINFO; ;EMAIL_UM_FLG; ;80
WEBINFO; ;ISACTIVE_FLG; ;80
WEBINFO; ;ISAVAILABLE_FLG; ;80
WEBINFO; ;LAST_AVAIL_CHANGE; ;80
WEBINFO; ;LAST_AVAIL_CHECK; ;80
WEBINFO; ;MONITOR_FLG; ;80
WEBINFO; ;NEWS_FLG; ;80
WEBINFO; ;NEWS_ID; ;80
WEBINFO; ;OBJECT_ID; ;80
WEBINFO; ;SEND_EMAIL_STATIC_FLG; ;80
WEBINFO; ;SEND_EMAIL_UM_FLG; ;80
WEBINFO; ;SEND_NEWS_FLG; ;80
WEBINFO; ;TASK_EXISTS; ;80
WEBINFO; ;TASK_OUTPUT; ;80
WEBINFO; ;TASK_TYPE; ;80
WEBINFO; ;USERCHANGED; ;80
WEBINFO; ;WEBMETRIX_FLG; ;80
WEBINFO_COMPONENT_TYPE;TABLE; ;081 Please ask Steffen Deutschmann… or a developer using this component…;81
WEBINFO_COMPONENT_TYPE; ;COMP_DESC; ;81
WEBINFO_COMPONENT_TYPE; ;COMP_DESC_TAG; ;81
WEBINFO_COMPONENT_TYPE; ;COMP_TYPE; ;81
WEBINFO_COMPONENT_TYPE; ;DISPLAY_GROUP; ;81
UM_USERS;TABLE; ;"100 User-Table of the UserManagement, public (applications may unlimited join to this table inside their FDT Schema)
This table should be used to store users actively using an application. Users should not be physically deleted using only the objectStateId to mark them as DELETED.
Applications should request nightly synchronization with LDAP by Chains (CMP module/mndant, CMP_User_Update.chn) This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates to lookup Users assigned to their own entities.
The User-Table automatically builds a SearchKey corona for free text searches in google style.";100
UM_USERS; ;ADDRESS;Optional field to store the address of a user (format deciede by application - preferred: local format);100
UM_USERS; ;CHANGED;Date of last change to this record, set by trigger.;100
UM_USERS; ;CHANGEDBY;CWID of the modifier.;100
UM_USERS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);100
UM_USERS; ;COUNTRY_CODE;ISO code of the country the user lives in / comes from (THIS IS NOT THE COUNTRY CODE of the locale the user uses the application with - see DISPLAY_COUNTRY_CODE);100
UM_USERS; ;CREATED;Creation date of this record, set by trigger.;100
UM_USERS; ;CREATEDBY;CWID of the creator.;100
UM_USERS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;100
UM_USERS; ;CWID;The bayer CWID of a user - should be filled, not stricly obligatory;100
UM_USERS; ;DISPLAY_COUNTRY_CODE;country ISO code of the locale the user choosed inside the application (eg. a belgian may choose en_US, because the application does not support fr_BE);100
UM_USERS; ;DISPLAY_LANGUAGE_CODE;language ISO code of the locale the user choosed inside the application (eg. a belgian may choose en_US, because the application does not support fr_BE);100
UM_USERS; ;DO_EXT_REVALIDATE; this flag is used to mark a user requireing revalidation of permissions having dependencies to external permission systems (e.g. LDAP, ADS, PUMA) by an asynchronous task. If a direct assigned permission is changed, the application should directly synchronize the permission. If the users permission may have changed due to changes on profile or group memberships, mark that single user to be revalidating al his permissions, useing the UMUserDoExtRevalidateNDC. If the permissions assigned to a profile or group are changed use the proper method to mark all users member of the group/profile to require revaidation of their permissions: OTUserManagementN.markUsersForExtRevalidate().;100
UM_USERS; ;EMAIL;The email address of a user - typically synchronized with ldap, if ldap sync was enabled;100
UM_USERS; ;EXPIRY_DATE;The date an account for thie application should expire (unlimited, if null);100
UM_USERS; ;EXPIRY_MAIL_SENT;The date , an expire mail was sent to e.g. the manager/sponsor responsible of a user and/or the user himself. This field should be reset, if the expire_date is changed. Usage/implementation has to be done by the application (not yet done directly by the foundation due to individual strategies);100
UM_USERS; ;EXPIRY_REMINDER_SENT;The date , a second expire mail (reminder) was sent to e.g. the manager/sponsor responsible of a user and/or the user himself.;100
UM_USERS; ;EXT_ID;"An external ID a user is identified externally - e.g. a cwid of an external users company, e.g. a ""BASF cwid""…";100
UM_USERS; ;FAX;fax number - typically synchronized with ldap, if ldap sync was enabled;100
UM_USERS; ;FIRSTNAME;firstname of the user - typically synchronized with ldap, if ldap sync was enabled;100
UM_USERS; ;ISEXTERNAL;This marks a user as not to be a member of the company the application is created for.;100
UM_USERS; ;LANGUAGE_CODE;The ISO code of the NATIVE language the user speaks (NOT the language the user selected to run the application in - see DISPLAY_LANGUAGE_CODE;100
UM_USERS; ;LAST_CHANGE_MAIL_SENT;The date a user was sent the last mail reminding him to change his password.;100
UM_USERS; ;LASTLOGIN;The date the user logged in last.;100
UM_USERS; ;LASTNAME;lastname - typically synchronized with ldap, if ldap sync was enabled;100
UM_USERS; ;LOGIN_ID;An alternate ID the user may use to login - if different from the CWID.;100
UM_USERS; ;LOGIN_PASSWORD;A field to use a users password, if no separate system is used for authentification.;100
UM_USERS; ;MIDDLEINITIAL;… currently not filled by LDAP sync. Anymore;100
UM_USERS; ;OBJECT_ID;Internal - Distinct identifier for every record.;100
UM_USERS; ;OBJECTSTATE_ID;activation state of the user, see UM_ObjectState. A user is currently not usable, if status is 0 = deleted or 2 = inactive. Further predefined active states are 1 = active and 9 = autocreated. Applications may define further ACTIVE states (but no further states for not usable e.g. like INACTIVE/DELETED);100
UM_USERS; ;OBJECTSTATEINTERNAL_ID;for new users, only 2 states allowed (NOT all states of UM_Objectstate), allowed: 1 = aclive and 2 = inactive (because user is still in creation by application) - should not be used anymore, DEPRECATED, because we normally don't create users in workflows anymore. Fill always 1.;100
UM_USERS; ;OUT_OF_OFFICE_APPL_ACT_DATE;fields for absence of users: timestamp the user created/activated his absence information;100
UM_USERS; ;OUT_OF_OFFICE_APPL_DEACT_DATE;fields for absence of users: timestamp the user deactivated his absence information;100
UM_USERS; ;OUT_OF_OFFICE_DEPUTY_USER_CWID;fields for absence of users: cwid of the user replacing him during his absence;100
UM_USERS; ;OUT_OF_OFFICE_END_DATE;fields for absence of users: timestamp of the END of the users absence;100
UM_USERS; ;OUT_OF_OFFICE_MSG;fields for absence of users: message to use to inform others about the users absence;100
UM_USERS; ;OUT_OF_OFFICE_START_DATE;fields for absence of users: timestamp of the START of the users absence;100
UM_USERS; ;PHONE1;primary phone number;100
UM_USERS; ;PHONE2;secondary phone number;100
UM_USERS; ;QUICK;column automatically filled by trigger for temporary emulating free text searches - soon replaced by real free text search fdt (searchkeys);100
UM_USERS; ;REPORTS_SHOW_LOGS;BOOLEAN flag, for controlling reporting engines, if set to true, the reporting engin should show extended debugging logs to the screen (for use with developers / support admins / business admins to analyze report behaviours / results / problems. FLR3/4 supports control by this flag.;100
UM_USERS; ;SALUTATION_ID;"Text Id, displaytext TextType ""salutation""";100
UM_USERS; ;SK_REFRESH;controll flag to controll searchkey updates, for temporary enforcing updates, set to 1, for freezing current index (changes of table won't change index) set to 0, for activating regular updates set to NULL - will cause the sk_refresh to iterate through -9 to -1 for marking changes. SK_REFRESH IS FORBIDDEN TO BECOME PART OF A DC (except for a special SK controll DC ONLY containing object_Id and sk_Refresh). The concept of iteration allows extending of table and searchkey columns by applications creating parrallel trigers ONLY monitoring/recalculating their extended columns, not changing the original triggers. Altering the DEFAULT for sk_Refresh to 0 allows disabling searchkey indexing in general - if they don't want to use it. ;100
UM_USERS; ;SPONSOREDBY;If an application has multiple (business)admins deciding, which users gain acces to an application, this field should be used to store the CWID of the admin allowing access for a user.;100
UM_USERS; ;STATE_PROVINCE;the state/province of the users address;100
UM_USERS; ;TERMSOFUSE;the date, the user has accepted the terms of use - if empty and the application requires the accept of terms of use: the user has to accept them before allowed to use the application (or reaccept them due to changed terms of use);100
UM_USERS; ;TERMSOFUSELAST;if the user has to reaccept the terms of use due to changes, the last accept of terms of use should be stored in this field, clearing the field TERMSOFUSE enforcing reacceptance…;100
UM_USERS; ;TIMEZONE_ID;"The Tiemzone the users address is located at (displaytext code of texttype ""timezone"")";100
UM_USERS; ;TITLE; The title of the user, e.g. Dr, Sir, …;100
UM_USERS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";100
UM_USERS; ;WAS_LOCKED_INACTIVE_DATE;The date/time a user account was locked (objectstate_Id: inactive = 2);100
UM_USERS; ;WAS_LOCKED_REASON;The reason, user was locked for, should be filled by a displaytext, texttype > 9500 NOT YET assigned (tbd!!!);100
UM_USERS;;TITLE_COMMENT;a title comment, like e.g. deleivered by GUMS as title (but used in GUMS in many ways);100
UM_USERS;;COMPANY_NAME;bayer company name, see GUMS;100
UM_USERS;;COMPANY_CODE;bayer company code, see GUMS;100
UM_USERS;;LEADING_SUBGROUP;bayer leading subgroup, see GUMS;100
UM_USERS;;ORG_NAME;bayer org name, see GUMS;100
UM_USERS;;ORG_ACRONYM;bayer org acronym, see GUMS;100
UM_USERS;;ORG_UNIT;bayer org unit, see GUMS;100
UM_USERS;;LOCATION;bayer location of the user, see GUMS;100
UM_USERS;;SITE_CODE;bayer site code, see GUMS;100
UM_USERS;;BUILDING;bayer building of the user normally working at, see GUMS;100
UM_USERS;;ROOM;bayer standard room number of the user normally working at, see GUMS;100
UM_USERS;;EXTERNAL_COMPANY;the external company name of the users company, if the user is external, see GUMS;100
UM_USERS;;PRIMARY_CWID;primary cwid of the user, if the cwid is a secondary (typically technical) cwid, see GUMS;100
UM_USERS;;SUPERVISOR_CWID;cwid of the users supervisor, see GUMS;100
UM_USERS;;SPONSOR_CWID;cwid of the users sponsor, typically for external users, see GUMS;100
UM_GROUPS;TABLE; ;101 Table to store real existing groups of persons, like the employees of a company, the members of a team, etc. Do not use to store people having the same function in meaning the same collection of permissions (these are virtual groups of persons) - use Profiles instead. Permissions may be assigned (exceptionally) to groups if there is a strict binding between a group and this permission (team BDC Database has always Global-DB-Admin-Permission). Real existing Groups typically have contact/address data. Therefore use especially the ad_* fields to assign addresses. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates to lookup Groups or Users of Groups assigned to their own entities.;101
UM_GROUPS; ;AD_COUNTRY_CODE;The iso country code of the address;101
UM_GROUPS; ;AD_EMAIL;general email to contact the group, e.g. mail-in address, e.g.  BDC-Database@bayer.com;101
UM_GROUPS; ;AD_FAX;general fax number of the group, e.g. hotline fax number;101
UM_GROUPS; ;AD_FORMATTED_ADDRESS_LINES;localized performatted mailing address to be used e.g. for snail mail;101
UM_GROUPS; ;AD_LANGUAGE_CODE;the language code of the typical native language spoken by the group;101
UM_GROUPS; ;AD_NAME1;name of the group (primary name);101
UM_GROUPS; ;AD_NAME2;name of the group (extended name);101
UM_GROUPS; ;AD_NAME3;name of the group (extended name);101
UM_GROUPS; ;AD_NAME4;name of the group (extended name);101
UM_GROUPS; ;AD_PB_CITY;postbox city;101
UM_GROUPS; ;AD_PB_CITY_AREA;postbox postal area;101
UM_GROUPS; ;AD_PB_POSTAL_CODE;postbox postal code;101
UM_GROUPS; ;AD_PHONE1;primary group phone number (e.g. hotline number);101
UM_GROUPS; ;AD_POST_BOX;postal box number;101
UM_GROUPS; ;AD_STATE_PROVINCE;state/province of the address;101
UM_GROUPS; ;AD_ST_CITY;city where the group is settled;101
UM_GROUPS; ;AD_ST_CITY_AREA;area of the address;101
UM_GROUPS; ;AD_ST_POSTAL_CODE;the address postal code;101
UM_GROUPS; ;AD_STREET;street of the address of the group;101
UM_GROUPS; ;AD_WEBSITE;general website of this group;101
UM_GROUPS; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;101
UM_GROUPS; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";101
UM_GROUPS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);101
UM_GROUPS; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;101
UM_GROUPS; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;101
UM_GROUPS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;101
UM_GROUPS; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;101
UM_GROUPS; ;GROUPDESCRIPTION;A description of the nature of the group;101
UM_GROUPS; ;GROUPNAME;name of the group;101
UM_GROUPS; ;GROUPNUMBER;an alphanumeric group number, should be used in connection with the MD_SYSTEM_ID_GROUP_NUMBER, if different types of groups feeded from different systems are handled.;101
UM_GROUPS; ;MD_IS_DELETE_MARKED;a delete mark comming from the source system (with the meaning, this group is deprecated/obsolete). If the source system should cause a delete in the UMGMT, set the objectstate_Id to DELETED,,,;101
UM_GROUPS; ;MD_SYSTEM_ID_GROUP_NUMBER;the source system / class of group, the group comes from, should be used in connection with the GROUP_NUMBER, if different types of groups feeded from different systems are handled.;101
UM_GROUPS; ;MD_VAT_REG_NUMBER;The VAT number of the group;101
UM_GROUPS; ;OBJECT_ID;Internal - Distinct identifier for every record.;101
UM_GROUPS; ;OBJECTSTATE_ID;activation state of the groups, see UM_ObjectState. A group is currently not usable, if status is 0 = deleted or 2 = inactive. Further predefined active states are 1 = active and 9 = autocreated. Applications may define further ACTIVE states (but no further states for not usable e.g. like INACTIVE/DELETED);101
UM_GROUPS; ;PARENT_ID;If an application wants to define hierarchical groups (trees of groups), it may use the parent_Id to reference a parent group. The interpretation of these group structures has to be done by the application (e.g. permissions are not inherited to super/sub groups. For efficient usage of group structure, a trigger automatically creates a transitive hull of the group graph: UM_GROUPS_TH (managed fully automatic);101
UM_GROUPS; ;QUICK;column automatically filled by trigger for temporary emulating free text searches - soon replaced by real free text search fdt (searchkeys);101
UM_GROUPS; ;REGIONAL_SCOPE;"the reagon, this group is ""responsible"" for - if there are different groups responsible for different (single) regions in a meaning the application defines regions";101
UM_GROUPS; ;SK_REFRESH;controll flag to controll searchkey updates, for temporary enforcing updates, set to 1, for freezing current index (changes of table won't change index) set to 0, for activating regular updates set to NULL - will cause the sk_refresh to iterate through -9 to -1 for marking changes. SK_REFRESH IS FORBIDDEN TO BECOME PART OF A DC (except for a special SK controll DC ONLY containing object_Id and sk_Refresh). The concept of iteration allows extending of table and searchkey columns by applications creating parrallel trigers ONLY monitoring/recalculating their extended columns, not changing the original triggers. Altering the DEFAULT for sk_Refresh to 0 allows disabling searchkey indexing in general - if they don't want to use it. ;101
UM_GROUPS; ;SUBTYPE;subtype of a group - If the application manages different types of groups, like legal entities AND company, the application may use the TOPTYPE and SUBTYPE to classify the groups (to definie different types of groups with different funcional meaning inside the application);101
UM_GROUPS; ;TOPTYPE;toptype of a group - If the application manages different types of groups, like legal entities AND company, the application may use the TOPTYPE and SUBTYPE to classify the groups (to definie different types of groups with different funcional meaning inside the application);101
UM_GROUPS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";101
UM_GROUPS; ;USER_ID_RESPONSIBLE;Three users references to define persons responsible for a group.;101
UM_GROUPS; ;USER_ID_RESPONSIBLE2;Three users references to define persons responsible for a group.;101
UM_GROUPS; ;USER_ID_RESPONSIBLE3;Three users references to define persons responsible for a group.;101
UM_PROFILES;TABLE; ;102 Profiles are collections of Permissions to be assigned as a set to  a User,  if he  gets a certain business Role assigned inside an application. KEEP IN MIND: Normally a User can have multiple business Roles inside an application (a combination of Roles) at the same time, NOT ONLY ONE. So be prepared that there is not only ONE Profile assigned to a User. A Profile IS NOT A PERMISSION. It is only a container of Permissions. If it is empty, the User MUST NOT get a permission by assigning an empty Profile!!! So do not imply anything from the assignment of a Profile to a User, but only by the permissions contained inside the Profile (Permission Container). This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (OTUserMgntSingleton / UMUserNDC) methods to manage the Profiles (Administration) * OR * use the profiles (that means the permissions of the profiles) by calling getResolvedPermissions on UMUserNDC or OTUserMgntSingleton. Profiles must stay invisible.;102
UM_PROFILES; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;102
UM_PROFILES; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";102
UM_PROFILES; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);102
UM_PROFILES; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;102
UM_PROFILES; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;102
UM_PROFILES; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;102
UM_PROFILES; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;102
UM_PROFILES; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1);102
UM_PROFILES; ;ISEXTERNAL;Marks a profile for usage with external (1), internal (0) or ALL Users (NULL). (BOOLEAN, 0/1/NULL);102
UM_PROFILES; ;OBJECT_ID;Internal - Distinct identifier for every record.;102
UM_PROFILES; ;PROFILEDESCRIPTION;The description of the profile, to be displayed on adminiostration masks.;102
UM_PROFILES; ;PROFILENAME;The technical Name AND (secondary/external) Key of the profile. The profile name must not be changed. There was no additional key defined for profiles, because profile name should never be shown to users, but ONLY to administrators of an application, who typically understand technical names. If not, the profile description should explain the usage of the profile to the admin.;102
UM_PROFILES; ;QUICK;column automatically filled by trigger for temporary emulating free text searches - to be replaced by real free text search fdt (searchkeys). At the moment we are not working on the replacement FOR PROFILES, because the numbers of entries inside this table is typically so low, that a free text search currently makes not much sense on this table - for future extensions...;102
UM_PROFILES; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";102
UM_PROFILES;;TYPE;The Type of a profile. Big applications may define different types of profiles to classify them. Therefore the foundation predifines the DisplayText list 9500, that can be fully maintained by the application. Example: LOCAL / REMOTE (on distributed UserMgmts);
UM_PROFILES;;OWNER;The Owner (e.g. mandant) of a profile. Big applications may define different mandants having their own profiles. Therefore the foundation predifines the DisplayText list 9501, that can be fully maintained by the application. Example: MWB / MACS / BAP / CPD / M3 / PRD (esp. on distributed UserMgmts);
UM_PERMISSIONS;TABLE; ;103 This table contains STATIC permissions to be assigned directly or indirectly to users. These permissions are not related to certain entries inside a table, but to the application (or parts of it) in general. This implies that the assignment of a permission to a Group or Profile does not permission someone to do somthing with this group or Profile (this would be object related). It only gives this permission to a user gets assigned to this Group or Profile INDEPENDING OF by which Group or Profile he gets assigned the Permission. This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (OTUserMgntSingleton / UMUserNDC) methods to manage the Permissions, using getResolvedPermissions. Creations of Permissions should be done by the Applications AlterSteps. It does not make much sense to create them via a Frontend. Because the content of this table is static and has to be initialized, Permissions have to be 100% managed by ALTER-STEPS.;103
UM_PERMISSIONS; ;ASSIGN_GROUP;Flag (for the frontend) defining, if this Permission is allowed to be assigned to a Group (1) or not (0). Be aware, that even if a permission is not allowed to be assigned this way, there may be historical (or exceptional by DB) assignemnts of this kind. (BOOLEAN, 0/1);103
UM_PERMISSIONS; ;ASSIGN_PROFILE;Flag (for the frontend) defining, if this Permission is allowed to be assigned to a Profile (1) or not (0). Be aware, that even if a permission is not allowed to be assigned this way, there may be historical (or exceptional by DB) assignemnts of this kind. (BOOLEAN, 0/1);103
UM_PERMISSIONS; ;ASSIGN_USER;Flag (for the frontend) defining, if this Permission is allowed to be directly assigned to a User (1) or not (0). Be aware, that even if a permission is not allowed to be assigned this way, there may be historical (or exceptional by DB) assignemnts of this kind. (BOOLEAN, 0/1);103
UM_PERMISSIONS; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;103
UM_PERMISSIONS; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";103
UM_PERMISSIONS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);103
UM_PERMISSIONS; ;CODE;The UNIQUE key returned to the application to implement the functionality based on this permission. DO NOT USE THE OBJECT_ID instead - object Ids are DIFFERENT on different stages of an application. This is at the same time the secondary/external key of the permission especially in case of using distributed usermanagement functionality. Permissions SHOULD be created/managed by alter scripts.;103
UM_PERMISSIONS; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;103
UM_PERMISSIONS; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;103
UM_PERMISSIONS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;103
UM_PERMISSIONS; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;103
UM_PERMISSIONS; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1);103
UM_PERMISSIONS; ;OBJECT_ID;Internal - Distinct identifier for every record.;103
UM_PERMISSIONS; ;ORDERBY;Field to assign a certain explicite order to the entries, when shown inside a frontend (administration). (NUMERIC);103
UM_PERMISSIONS; ;PERMISSIONDESCRIPTION;Discription to give a detailed information, what functionality is controlled by this permission (and which external permissions they depend on / they control, e.g. LDAP Groups);103
UM_PERMISSIONS; ;PERMISSIONNAME;The name of a permission to be shown in Permission lists (frontend, administration). The name is not secondary key of a permission.;103
UM_PERMISSIONS; ;QUICK;column automatically filled by trigger for temporary emulating free text searches - to be replaced by real free text search fdt (searchkeys). At the moment we are not working on the replacement FOR PROFILES, because the numbers of entries inside this table is typically so low, that a free text search currently makes not much sense on this table - for future extensions...;103
UM_PERMISSIONS; ;TYPE;May be used to classify types of permissions. Currently this type is not (yet) bound to a displaytext (old style). This should be changed in the future.;103
UM_PERMISSIONS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";103
UM_USERS_GROUPS;TABLE; ;110 This table is used to assign Users to Groups. This is a linkage table not requiring it's own SQL Templates. Using XbyY queries, the queries  always also remember the XY-objectId. To delete such assignments use getDCByObjectId(user_Group_Id, UMUserGroupNDC.class).delete() This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates to lookup Users of Groups assigned to their own entities.;110
UM_USERS_GROUPS; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;110
UM_USERS_GROUPS; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";110
UM_USERS_GROUPS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);110
UM_USERS_GROUPS; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;110
UM_USERS_GROUPS; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;110
UM_USERS_GROUPS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;110
UM_USERS_GROUPS; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;110
UM_USERS_GROUPS; ;GROUP_ID;The object_Id of the group the user is assigned to.;110
UM_USERS_GROUPS; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1);110
UM_USERS_GROUPS; ;OBJECT_ID;Internal - Distinct identifier for every record.;110
UM_USERS_GROUPS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";110
UM_USERS_GROUPS; ;USER_ID;The user's object_Id;110
UM_USERS_PROFILES;TABLE; ;111 This table is used to assign Profiles (collections of Permissions) to Users. This is a linkage table not requiring it's own SQL Templates. Using XbyY queries, the queries  always also remember the XY-objectId. To delete such assignments use getDCByObjectId(user_Profile_Id, UMUserProfileNDC.class).delete().D520 Profiles must stay invisible.;111
UM_USERS_PROFILES; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;111
UM_USERS_PROFILES; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";111
UM_USERS_PROFILES; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);111
UM_USERS_PROFILES; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;111
UM_USERS_PROFILES; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;111
UM_USERS_PROFILES; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;111
UM_USERS_PROFILES; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;111
UM_USERS_PROFILES; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1);111
UM_USERS_PROFILES; ;OBJECT_ID;Internal - Distinct identifier for every record.;111
UM_USERS_PROFILES; ;PROFILE_ID;The object_Id of the profile (collection of permissions) assigned to the user.;111
UM_USERS_PROFILES; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";111
UM_USERS_PROFILES; ;USER_ID;The user's object_Id;111
UM_GROUPS_TH;TABLE; ;112 Groups allow definition of hierarchical structures using the parent_Id. Using such hierarchical structures in SQL is difficult and inefficient. Therefor triggers build a transitive hull over the tree(s) /forest stored in this table. This allows verry fast and simple access to the subtree / path to the root of a group. This table is maintained by the trigiggers of the UM_Groups table FULLY AUTOMATIC. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates to lookup Groups or Users of Groups assigned to their own entities. ;112
UM_GROUPS_TH; ;GROUP_ID_CHILD;The object_Id of an UM_Group sub node in a TH relation. This may be the direct child (path len 1), a far child (path len > 1) or the group node itself (path len 0, reflexive);112
UM_GROUPS_TH; ;GROUP_ID_PARENT;The object_Id of an UM_Group parent node in a TH relation. This may be the direct parent (path len 1), a far parent (path len > 1) or the group node itself (path len 0, reflexive);112
UM_GROUPS_TH; ;IS_DELETED;Nodes get only logically deleted (independent of the mode the UserManagement is used) to safe the indexes from degeneration. The deleted flag is set, if one of the parent_Ids on the path is NULLED or changed to a diferent target node.;112
UM_GROUPS_TH; ;IS_PARENT_DELETED;"This deleted flag is set, if the parent UM_Group get's the objectstate ""deleted"". This allows early optimization on selecting subtrees.";112
UM_GROUPS_TH; ;PATH_LEN;The length of the path between the two group nodes…;112
UM_PGU_PERMISSIONS;TABLE; ;115 This table assignes static permissions to Users directly, to Users being members of Groups or Users assigned to a Profile. ONLY ONE of the fields (user_Id, profile_Id OR group_Id) are allowed to be set - even this is currently NOT PROTECTED by the datamodell / a trigger, dont set more than one of these fields. This is illegal and WILL result in unexpected/undefined results/behaviour!!! D739manage the assignments of Permissions to Users, Profiles or exceptionally to Groups (Administration) * OR * use the assigned permissions (finally assigned directly or indirectly to Users) by calling getResolvedPermissions on UMUserNDC or OTUserMgntSingleton.;115
UM_PGU_PERMISSIONS; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;115
UM_PGU_PERMISSIONS; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";115
UM_PGU_PERMISSIONS; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);115
UM_PGU_PERMISSIONS; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;115
UM_PGU_PERMISSIONS; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;115
UM_PGU_PERMISSIONS; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;115
UM_PGU_PERMISSIONS; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;115
UM_PGU_PERMISSIONS; ;GROUP_ID;The object_Id of the group the permission is assigned to (giving the permission to all Users member of this Group).;115
UM_PGU_PERMISSIONS; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1);115
UM_PGU_PERMISSIONS; ;OBJECT_ID;Internal - Distinct identifier for every record.;115
UM_PGU_PERMISSIONS; ;PERMISSION_ID;The ObjectId of the UM_Permission assigned to a User OR Profile OR Group (not multiple at the same time);115
UM_PGU_PERMISSIONS; ;PROFILE_ID;The object_Id of the Profile the permission is assigned to (giving the permission to all Users assigned to this Profile).;115
UM_PGU_PERMISSIONS; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";115
UM_PGU_PERMISSIONS; ;USER_ID;The user's object_Id, ONLY if the permission is directly assigned to a User (not via Group or Profile).;115
UM_OBJ_PERMISSION;TABLE; ;"116 This table can be used to assign ""dynamic"" permissions directly or via profiles / groups to users. Dynamic permissions mean, this permissions are related to rows in a destination table - they are not ""static"" like UM_PGU_Permissions. Because the number of permissions assined to big tables can become verry big , the permissions are typically not loaded into memory, but checked by SQL directly inside SQL statements. For this only a unique way of checking permissions is allowed. All SQL must use the check described in the way the sample SQL fragment defines at the SQL-Rules document (see foundation-web/doc/ folder) . Permissions can be assigned to single rows of a table (setting obj_Table_Id to the object_Id) or (e.g. for admins) to all rows of the table, setting obj_Table_Id to NULL. The standard SQL fragment supports all these ways of permissioning. Only one of the three assignment fields (user_Id, group_Id OR profile_Id) is allowed to be set at the same time, even this is not yet protected. This table is PUBLIC BUT RESTRICTED - JOINS TO THIS TABLE ***ONLY*** ALLOWED IN THE DESCRIBED WAY BY SQL-Richtlinien (foundation-web/doc folder). Different usages will lead to unexpected partial wrong results and cause inconsistent behaviour to the UMGMT, e.g. on later extensions. Straight forward joins will cause wrong results and contradict the specification. Applications are allowed to join to this table from within their own SQL templates to lookup Groups or Users of Groups assigned to their own entities.";116
UM_OBJ_PERMISSION; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;116
UM_OBJ_PERMISSION; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";116
UM_OBJ_PERMISSION; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);116
UM_OBJ_PERMISSION; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;116
UM_OBJ_PERMISSION; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;116
UM_OBJ_PERMISSION; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;116
UM_OBJ_PERMISSION; ;DO_EXT_REVALIDATE;Marks this row to be revalidated with external usermgmt systems like LDAP, ADS, PUMA. Typically these systems work user based AND WITHOUT transactions. So typically a background task should first reflevt this flag to the UM_Users related to this entry (e.g. member) resetting the local flag and then revalidate the users one by one with the external systems.;116
UM_OBJ_PERMISSION; ;GROUP_ID;The object_Id of the group the object permission is assigned to (giving the permission to all Users member of this Group). Permissions via groups are currently NOT included, but only prepared!!!;116
UM_OBJ_PERMISSION; ;IS_DELETED;If the Usermgmt is switched to (distributable) softdelete mode, all deleted entries are not physical deleted, but instead deleted by this flag. All queries running on this filter always filter softdeleted entries so they behave exactly the same way like if running in physical deleted mode. Showing of soft deleted entries would mean extended / diffenrent functionality and is explicitely NOT supported. (BOOLEAN, 0/1) Independently if using physical or logical (soft) delete mode take care to ALLWAYS check this flag, never ignore!!!  See SQL-Richlinien at foundation-web/doc folder.;116
UM_OBJ_PERMISSION; ;OBJECT_ID;Internal - Distinct identifier for every record.;116
UM_OBJ_PERMISSION; ;OBJ_TABLE;The table name of the permissioned table in the format SCHEMA.TABLENAME (physical schema, not virtual) this is for documentation AND future highly generic use. Do not access to check for the permissioned table, use obj_Type instead (see the standard SQL fragment checking for permissions: SQL-Richlinien at foundation-web/doc folder.;116
UM_OBJ_PERMISSION; ;OBJ_TABLE_ID; The object_Id of the destination row, the permission is assigned to OR NULL for a global permission assigned to all rows of the destination table - for DETAILED description see:  SQL-Richlinien at foundation-web/doc folder.;116
UM_OBJ_PERMISSION; ;OBJ_TYPE;"A logical name for the the table, these permissions are assigned to. This name is checked by the standard SQL fragment to filter for permissions assigned to this table. (e.g. ""ReportHead"" for PRD_REPORT_HEAD table OR ""Dashboard"" for dashboard entries stored in a Metatable PRODUCT_REF, with is_Dashboard = 1).";116
UM_OBJ_PERMISSION; ;PERMISSION;"The permission (code) of the permission assigned to a row of the destination table. You may define different rights to a destination table at the same time, e.g. one may be ""change"", one ""delete"", one ""show"" and one ""show prices"". The permissions are not predifined by a table or a constraint (like the UM_Permissions for UM_PGU_Permissions). In the future some kind of constraints may be added to better save the consistency, e.g. by a DisplayText list & constraint.";116
UM_OBJ_PERMISSION; ;PROFILE_ID;The object_Id of the Profile the permission is assigned to (giving the permission to all Users assigned to this Profile).;116
UM_OBJ_PERMISSION; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";116
UM_OBJ_PERMISSION; ;USER_ID;The user's object_Id, ONLY if the permission is directly assigned to a User (not via Group or Profile).;116
UM_DPT_PERMISSION;TABLE; ;117 This table is a preview for a table assigning permissions to sets of rows of a destination table via a display text classification on this table. Currently this is not in use and not requested by any application. This table shall show, how such permissionings can be implemented simmilar to the UM_OBJ_Permission style. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates to lookup Groups or Users of Groups assigned to their own entities.;117
UM_DPT_PERMISSION; ;CHANGED; ;117
UM_DPT_PERMISSION; ;CHANGEDBY; ;117
UM_DPT_PERMISSION; ;CHANGEDON; ;117
UM_DPT_PERMISSION; ;CODE; ;117
UM_DPT_PERMISSION; ;CREATED; ;117
UM_DPT_PERMISSION; ;CREATEDBY; ;117
UM_DPT_PERMISSION; ;CREATEDON; ;117
UM_DPT_PERMISSION; ;DO_EXT_REVALIDATE; ;117
UM_DPT_PERMISSION; ;GROUP_ID; ;117
UM_DPT_PERMISSION; ;IS_DELETED; ;117
UM_DPT_PERMISSION; ;OBJECT_ID; ;117
UM_DPT_PERMISSION; ;PERMISSION; ;117
UM_DPT_PERMISSION; ;PROFILE_ID; ;117
UM_DPT_PERMISSION; ;TEXT_ID; ;117
UM_DPT_PERMISSION; ;TEXTTYPE_ID; ;117
UM_DPT_PERMISSION; ;USERCHANGED; ;117
UM_DPT_PERMISSION; ;USER_ID; ;117
UM_OBJECTSTATE;TABLE; ;120 List of Objectstates. Normally the states are (deleted = 0, active = 1, inactive = 2, autocreated = 9). This table is an INTERNAL constraint table - strictly private and not even Umgmt internal accessed by SQL. Because the content of this table is static and has to be initialized, entries have to be 100% managed by ALTER-STEPS.;120
UM_OBJECTSTATE; ;OBJECTSTATE;Text of the ObjectState;120
UM_OBJECTSTATE; ;OBJECTSTATE_ID;Internal - Distinct identifier for every record. Not global unique, it's not an object_Id (more like a text_Id / textType_Id of the DisplayTexts);120
UM_GROUP_SUBTYPE;TABLE; ;121 This is an internal constraint table defining SubTypes of groups, e.g. if the application defines as TopTypes INTERNAL and EXTERNAL, it define as one of its SubTypes for INTERNAL: LegalEntity and as one of ist SubTypes for EXTERNAL: Company. This is a Constraint Table only and shall be supported by an DisplayText. The Umgmt does not yet define an application managed DisplayText for this table yet. This shall be changed soon (open ToDo). This table is not allowed to be accessed by SQL, not even by Umgmt internal SQL. Because the content of this table is static and has to be initialized, entries have to be 100% managed by ALTER-STEPS.;121
UM_GROUP_SUBTYPE; ;SUBTYPE; The subtype assigned to a toptype, e.g. (external) Company, or (internal) Legal Entity.;121
UM_GROUP_SUBTYPE; ;TOPTYPE; The toptype, the subtype is assigned to.;121
UM_GROUP_TYPE;TABLE; ;122 This is an internal constraint table for applications defining TopTypes of groups, e.g. INTERNAL and EXTERNAL. This is a Constraint Table only and shall be supported by an DisplayText. The Umgmt does not yet define an application managed DisplayText for this table yet. This shall be changed soon (open ToDo). This table is not allowed to be accessed by SQL, not even by Umgmt internal SQL. Because the content of this table is static and has to be initialized, entries have to be 100% managed by ALTER-STEPS.;122
UM_GROUP_TYPE; ;TOPTYPE; The toptype available for classification of groups.;122
SV_SURVEY;TABLE; ;130 This is the master table for defining surveys. A survey defines a set of sections containing questions to be answered by users optionally assigned to a destination object (by SURVEY_ASSIGN). This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;130
SV_SURVEY; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;130
SV_SURVEY; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";130
SV_SURVEY; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);130
SV_SURVEY; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;130
SV_SURVEY; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;130
SV_SURVEY; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;130
SV_SURVEY; ;DESCRIPTION;A detailed description for the survey.;130
SV_SURVEY; ;IS_DELETED;Surveys can only be logically deleted.;130
SV_SURVEY; ;OBJECT_ID;Internal - Distinct identifier for every record.;130
SV_SURVEY; ;SV_NUMBER;A number assigned to the survey.;130
SV_SURVEY; ;TITLE;The title of the survey.;130
SV_SURVEY; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";130
SV_SURVEY_SECTION;TABLE; ;131 This table defines sections on a survey grouping the Survery questions. Sections with the same Page number should be displayed at the same page, in the order of the position. Surveys may organize their questions in sections, but don't have to. But a survey should organize ALL questions in sections or NONE (not mixed). This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;131
SV_SURVEY_SECTION; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;131
SV_SURVEY_SECTION; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";131
SV_SURVEY_SECTION; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);131
SV_SURVEY_SECTION; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;131
SV_SURVEY_SECTION; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;131
SV_SURVEY_SECTION; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;131
SV_SURVEY_SECTION; ;OBJECT_ID;Internal - Distinct identifier for every record.;131
SV_SURVEY_SECTION; ;PAGE;The page number the section shall be displayed on.;131
SV_SURVEY_SECTION; ;POSITION;The position order in which the section shall be displayed on a page, if there are multiple sections on a page;131
SV_SURVEY_SECTION; ;SURVEY_ID;The object_Id of the survey, the survey section is assigned to.;131
SV_SURVEY_SECTION; ;TITLE;The title of the survey section.;131
SV_SURVEY_SECTION; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";131
SV_SURVEY_QUESTION;TABLE; ;132 This defines a question of a survey. It defines also the answer type (e.g. plain text, a choice of a DisplayText, or a type (date, boolen, number) that is expected as answer. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;132
SV_SURVEY_QUESTION; ;ANSWER_TEXTTYPE_ID;This defines the texttype of a display text, the user shall choos an answer from. If this id is not null, the possible answers are a displaytext selection list.;132
SV_SURVEY_QUESTION; ;ANSWER_TYPE;The type of the answer, defining a presentation layer widged to be used to receive an answer from the user.;132
SV_SURVEY_QUESTION; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;132
SV_SURVEY_QUESTION; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";132
SV_SURVEY_QUESTION; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);132
SV_SURVEY_QUESTION; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;132
SV_SURVEY_QUESTION; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;132
SV_SURVEY_QUESTION; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;132
SV_SURVEY_QUESTION; ;HAS_COMMENT;If true, the user can add a freetext comment to his selection - e.g. explaining his answer.;132
SV_SURVEY_QUESTION; ;IS_DELETED;If true, the question is deleted (logically). Users won't be asked anymore for this questions. Given answers to this question should not be shown anymore - but are historically available at the database.;132
SV_SURVEY_QUESTION; ;IS_OBLIGATORY;If true, the user MUST give an answer. If false, the user is allowed not to answer to thi question.;132
SV_SURVEY_QUESTION; ;IS_RANGE;If true, the answer is a range, typically making the widget to show two fields for a FROM and a TO value. If the type is a displaytext, the Displaytexts should have an order to enable the widget to decide about allowed TO values, if a FROM value was choosen.;132
SV_SURVEY_QUESTION; ;OBJECT_ID;Internal - Distinct identifier for every record.;132
SV_SURVEY_QUESTION; ;POSITION;The position of a question inside a section / list of questions.;132
SV_SURVEY_QUESTION; ;QUESTION;The question to be answered. Preffered this should be a translation key to load the question transalted from the translation. If no multi language Surveys are required, this can be used to store the whole question directly.;132
SV_SURVEY_QUESTION; ;SURVEY_ID;The survey the question is assigned to.;132
SV_SURVEY_QUESTION; ;SURVEY_SECTION_ID;The section this question is assigned to, if the survey uses sections to group it's questions.;132
SV_SURVEY_QUESTION; ;TOOLTIP;A translation key or a direct tooltip to be displayed e.g. via mouse over explaining the question.;132
SV_SURVEY_QUESTION; ;TOOLTIP_TYPE;The style of tooltip to use, if the presentationlayer allows multiple styles.;132
SV_SURVEY_QUESTION; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";132
SV_SURVEY_ASSIGN;TABLE; ;135 This assignes a survey to a group of users and defines the start and end time the survey is active. It may also define a destination object, this survey is related to. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;135
SV_SURVEY_ASSIGN; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;135
SV_SURVEY_ASSIGN; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";135
SV_SURVEY_ASSIGN; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);135
SV_SURVEY_ASSIGN; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;135
SV_SURVEY_ASSIGN; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;135
SV_SURVEY_ASSIGN; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;135
SV_SURVEY_ASSIGN; ;DESCRIPTION;A optional description for the assignment - e.g. why this group shall answer this survey related to the assigned object (e.g. a certain document);135
SV_SURVEY_ASSIGN; ;END_DATE;The end date / timestamp until which the survey is active;135
SV_SURVEY_ASSIGN; ;GROUP_ID;The group of users to answer on the survey.;135
SV_SURVEY_ASSIGN; ;IS_ACTIVE;Flag may be used to temporary disable - or abort the survey.;135
SV_SURVEY_ASSIGN; ;IS_DELETED;if true, the survey is logically deleted - already given answers are still available at the database.;135
SV_SURVEY_ASSIGN; ;OBJECT_ID;Internal - Distinct identifier for every record.;135
SV_SURVEY_ASSIGN; ;OBJ_TABLE;Like for UM_OBJ_PERMISSION, this defines the phys. destination table (for internal, generic usage only, format: schema.tablename), if the suvey is related to certein objects.;135
SV_SURVEY_ASSIGN; ;OBJ_TABLE_ID;this defines a certain object by ist object id, this survey is related to.;135
SV_SURVEY_ASSIGN; ;OBJ_TYPE;Like for UM_OBJ_PERMISSION, this defines a logical destination table, if the suvey is related to certein objects.;135
SV_SURVEY_ASSIGN; ;START_DATE;The start date, the survey is opened to the users to answer.;135
SV_SURVEY_ASSIGN; ;SURVEY_ID;The survey assigned to the group of users to answer,;135
SV_SURVEY_ASSIGN; ;TITLE;The title for the survey assignment.;135
SV_SURVEY_ASSIGN; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";135
SV_SURVEY_ANSWER;TABLE; ;137 This table stores a single answer of a user to a question as part of a set of answers (see SV_Survey_Answer_Head). This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;137
SV_SURVEY_ANSWER; ;ANSWER_TEXTTYPE_ID;This is a copy of the SV_Survey_Question Answer_TextType_Id. It defines the DisplayText TextType used to answer the question, if the Type of the Question is DisplayText related.;137
SV_SURVEY_ANSWER; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;137
SV_SURVEY_ANSWER; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";137
SV_SURVEY_ANSWER; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);137
SV_SURVEY_ANSWER; ;CODE1; If the SV_Survey_Question/Answer is DisplayText related, this is the CODE of the single / range start Answer selected by the user;137
SV_SURVEY_ANSWER; ;CODE2; If the SV_Survey_Question/Answer is DisplayText related, this is the CODE of the range end Answer selected by the user. In case of single answer questions (without range) this entriy is NULL.;137
SV_SURVEY_ANSWER; ;COMMENTS; An optional comment the user may add to additionaly describe his answer.;137
SV_SURVEY_ANSWER; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;137
SV_SURVEY_ANSWER; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;137
SV_SURVEY_ANSWER; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;137
SV_SURVEY_ANSWER; ;DATE1; If the SV_Survey_Question/Answer is of date type, this is the single date / date range start Answer selected by the user;137
SV_SURVEY_ANSWER; ;DATE2; If the SV_Survey_Question/Answer is of date type, this is the date range end Answer selected by the user. In case of single answer questions (without range) this entriy is NULL.;137
SV_SURVEY_ANSWER; ;NUMBER1; If the SV_Survey_Question/Answer is of numeric type, this is the single number / number range start Answer selected by the user;137
SV_SURVEY_ANSWER; ;NUMBER2; If the SV_Survey_Question/Answer is of numeric type, this is the number range end Answer selected by the user. In case of single answer questions (without range) this entriy is NULL.;137
SV_SURVEY_ANSWER; ;OBJECT_ID;Internal - Distinct identifier for every record.;137
SV_SURVEY_ANSWER; ;SURVEY_ANSWER_HEAD_ID;The Id of the Answer Head, this Answer is related to - defining the user and the related object.;137
SV_SURVEY_ANSWER; ;SURVEY_QUESTION_ID;The Id of the Question this Answer is related to, defining also the type of answer.;137
SV_SURVEY_ANSWER; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";137
SV_SURVEY_ANSWER_HEAD;TABLE; ;136 This table defines the Id of the User and the Id of a Survey Assignment definintg e.g. the related Object, the set of Answers belongs to. This table is PUBLIC. Applications are allowed to join to this table from within their own SQL templates.;136
SV_SURVEY_ANSWER_HEAD; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;136
SV_SURVEY_ANSWER_HEAD; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";136
SV_SURVEY_ANSWER_HEAD; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);136
SV_SURVEY_ANSWER_HEAD; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;136
SV_SURVEY_ANSWER_HEAD; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;136
SV_SURVEY_ANSWER_HEAD; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;136
SV_SURVEY_ANSWER_HEAD; ;IS_FINALIZED;FALSE if the user did not finish the answering of the questions yet, so he can give further answers or change his answers. TRUE, if the user finished the answering, so the answers cannit be changed anymore. The user can only finish his answerings, if he at least answerde all OBLIGATORY questions.;136
SV_SURVEY_ANSWER_HEAD; ;OBJECT_ID;Internal - Distinct identifier for every record.;136
SV_SURVEY_ANSWER_HEAD; ;SURVEY_ASSIGN_ID;The Id of the Survey_Assign, the Answers are related to.;136
SV_SURVEY_ANSWER_HEAD; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";136
SV_SURVEY_ANSWER_HEAD; ;USER_ID;The Id of the User answering to the Survey (UM_Users Table).;136
REPORT;TABLE; ;200 FLR 3/4 Reports. This Table is PRIVATE!!! Applications are not allowed to directly join to this table. Use the Components (SBReport(Meta)) methods to offer Report List to users for execution.D674;200
REPORT; ;AUTO_STORE_MAX;PREPARED FOR IMPL: If all Searches are stored as User_Reports, this number limits the length of the Users history. (example: CPD mode), not yet implemented in code.;200
REPORT; ;CATEGORY_ID;Internal - Identifier for REPORT_CATEGORY (grouping reports for display).;200
REPORT; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;200
REPORT; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";200
REPORT; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);200
REPORT; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;200
REPORT; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;200
REPORT; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;200
REPORT; ;DATASOURCE;Name of the ObjectServer to use executing the report (may eg be configured to other databases). If WS: is specified as prefix, the report is executed via the WebService interface of the Reporter.;200
REPORT; ;DEPLOYMENT_STAGE;Flag 1 enables deployment to PROD, 0 (temporary) disables PROD deployment (work in progress). Take care of consistency, that if one report is deployed the first time to PROD, all related Reports have the doployment activated for PROD, too (selection reports for columns, linked reports, pre executing reports);200
REPORT; ;DIMENSION_KEYS_AUTOEXEC;PREPARED FOR IMPL: For reports with DIMENSIONS: Dimension KEYs to be automatically executed (variants of the report), currently still specified by config properties, not yet implemented in code.;200
REPORT; ;DIMENSION_KEYS_MANUEXEC;PREPARED FOR IMPL: For reports with DIMENSIONS: Dimension KEYs to be additionally/manually selected by the user (variants of the report), currently still specified by config properties, not yet implemented in code.;200
REPORT; ;DRILLDOWN_IDENTIFIER;Unchangeable Technical name of the Report used for internal purposes, like in Drilldowns as key, if undefined initially autogenerated from the display name by normalization (e.g. uppercase);200
REPORT; ;HAS_EXTENDED_SEARCH;"boolean flag, if 1 the report has an extended search mask. This is a ""deprecated "" style like BayerONE worked. New implementations assign display Slots to Columns. This Slots may be assigned to different Search Pages / Tabs, to be shown, if one of their slots has columns assigned.";200
REPORT; ;IS_WFT_WITH_DYN_HEADERS;PREPARED FOR IMPL:For replacement of old fashioned Workflow_Type_Id - Report has a dynamic number of columns (2 dimensional), names defined by a  special mode of report execution (example: CPD), not yet implemented in code.;200
REPORT; ;IS_WFT_WITH_NO_AUTOEXEC;PREPARED FOR IMPL: For replacement of old fashioned Workflow_Type_Id - Report is not executed automatically /always req. User interaction to execute, even if the report has no search user changable (positioned) input columns, not yet implemented in code.;200
REPORT; ;IS_WFT_WITH_SEARCHMASK;PREPARED FOR IMPL: For replacement of old fashioned Workflow_Type_Id - Report has a search mask, If false, has no posibility to specify a special search configuration manually, not yet implemented in code.;200
REPORT; ;IS_WFT_WITH_SEARCHMASK_CLOSED;PREPARED FOR IMPL: For replacement of old fashioned Workflow_Type_Id - If the Report has a searchmask, it is displayed only on user interaction (e.g. open mask by button to edit the search configuration), not yet implemented in code.;200
REPORT; ;IS_WFT_WITH_STORED_NO_AUTOEXEC;PREPARED FOR IMPL: For replacement of old fashioned Workflow_Type_Id - Controls, if stored searches are executed automatically. If not, values are first reoffered  in a search mask, not yet implemented in code.;200
REPORT; ;LINES_PER_PAGE;Lines per page, the report should by default use (may be changed by the user) If NULL: report has no paging support, if NOT NULL: report always is executed in paging mode.;200
REPORT; ;MAX_RESULT_ROWS;PREPARED FOR IMPL: A Limit for the number of lines returned without paging, e.g. also on print and export, not yet implemented in code.;200
REPORT; ;NAME;??? Name of report for Display. The name is used as key to for a translation to receive a language specific name. ??? New format of translations ???;200
REPORT; ;NAVIGATION_POSITION;Navigation position inside a report category. Not used in portal context.;200
REPORT; ;OBJECT_ID;Internal - Distinct identifier for every record.;200
REPORT; ;OBJECT_TYPE;Defines the entity displayed by the report (the entyty type a single row represents, virtual name, e.g. user, profile, document, attachment, …);200
REPORT; ;REPORT_RIGHT;Set if needs a special UserMgmt Permission (code) assigned to be allowed to see/execute the report. (access control). A comma separated list of rights may be specified. The users then needs ALL specified permissions to execute the report (NOT only one of them);200
REPORT; ;SQLTEMPLATE;The SQL-Template of the Report OR a reference to the ConfigMap entry CFGMAP:<name> storing the SQL-Template, property: xxx.FLR.QueryTemplates.<name>.  If the Report is a WebService report, this contains a set of properties specific to the WebServiceCaller class. The class is identified by the standard property class=;200
REPORT; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";200
REPORT; ;USER_CONF_COLUMN_ORDER;PREPARED FOR IMPL:boolean flag!!! If true, the user is offered an access control (e.g. a button) to enter the column configuration, configuring the order and visibility of the columns, not yet implemented in code.;200
REPORT; ;WORKFLOW_TYPE_ID;deprecated identifier defining combined execution mores of a report: 0 - report has search mask OR report is executed in RESULT mode w/o COUNT (=w/o paging), 1 - report is executed in COUNT and RESULT mode (for paging), 2 - report is executed in COUNT mode only, 3 - report has dynamic headers, 4 - report is executed in DIMENSION mode (obsolete, depends on if report has defined dimension modes or not, currently still by config parameters, NULL:??? (with/without paging?);200
REPORT_CATEGORY;TABLE; ;201 Base categories for reports (group of reports to be displayed together in a certain order). This Table is PRIVATE!!!;201
REPORT_CATEGORY; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;201
REPORT_CATEGORY; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";201
REPORT_CATEGORY; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);201
REPORT_CATEGORY; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;201
REPORT_CATEGORY; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;201
REPORT_CATEGORY; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;201
REPORT_CATEGORY; ;MANDANT;Specifies a ceartain Mandant, this Category and all it's reports are assigned to (all Reports are mandant specific) - available to all MANDANTs if NULL;201
REPORT_CATEGORY; ;NAME;Name of category.;201
REPORT_CATEGORY; ;NAVIGATION_POSITION;Navigation position. Not used in portal context.;201
REPORT_CATEGORY; ;OBJECT_ID;Internal - Distinct identifier for every record.;201
REPORT_CATEGORY; ;REPORT_CLASS;Report class.;201
REPORT_CATEGORY; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";201
REPORT_COLUMN;TABLE; ;202 Describes/defines the columns of a report.  This Table is PRIVATE!!!;202
REPORT_COLUMN; ;ALLOWED_OPERATORS;"Comma separated List of allowed operators (for Columns of type Input); which operators are possible depends on the frontend widget, first operator is default, examples: NOT, !=, <, >, before, after, between, SK corona bundle names";202
REPORT_COLUMN; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;202
REPORT_COLUMN; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";202
REPORT_COLUMN; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);202
REPORT_COLUMN; ;COLUMN_RIGHT;Can contain a (comma separated list of) right(s) required. All rights are required to get this column returned from the report. If the User does not have this right (static permission), the column is removed completely (user does not even know about existence);202
REPORT_COLUMN; ;COLUMN_WIDTH;Column min. width ensured by reporter (in pixels). May be null.;202
REPORT_COLUMN; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;202
REPORT_COLUMN; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;202
REPORT_COLUMN; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;202
REPORT_COLUMN; ;DEFAULT_VALUE;Default value for input (prefilling the input field) and Constants/Session Columns. This was formaly also used for Outputcolumns as formatted Default if the result value was null - DEPRECATED, use DEFAULT_VALUE* in REPORT_COLUMN_FORMAT (depends from output format) - Warning, may not be fully implemented yet for non-Output-Coulmns.;202
REPORT_COLUMN; ;DEFAULT_VALUE_OP;DefaultOperator for DEFAULT_VALUE to be preselected in the Searchmask.;202
REPORT_COLUMN; ;DEFAULT_VALUE2;Second Default Value, if the selected operator requires two defaults, like ranges.;202
REPORT_COLUMN; ;DESTINATION_LINK_TEMPL;DEPRECATED!!! Use REPORT_COLUMN_FORMAT.DESTINATION_LINK_TEMPLATE instead. Once was an optional template to generate a link around the displayed result [FORMATTED_VALUE], was used with output format HTML only.;202
REPORT_COLUMN; ;DIMS_DISPL_TEMPLATE_CODE;This code defines with which frontend visualization the “Dimension-Data” shall be displayed (i.e. as TagCloud, asList, as Table,…) (This does not mean that Foundation-Template-Macro-language is involved );202
REPORT_COLUMN; ;DIMS_NAME;Input Columns only, allows binding the column to a dimension (by ist name) of the report for selecting one or a list of dimensions to limit the result to.;202
REPORT_COLUMN; ;DIMS_SIZE;Size of dimensions when displayed (limited number of result rows);202
REPORT_COLUMN; ;DISPLAY_HEADER_POSITION;IF the report renderer supports rendering of certain input/constant/session parameters on the result page, the columns having DISPLAY_HEADER_POSITION NOT NULL shall be rendered (if used for selection), in the order of this position (input breadcrumbs);202
REPORT_COLUMN; ;DO_ENFORCE_TO_USER_REPORTS;Shall a new column be enforced to be added to existing user specific column configuration/ reports? 0/1;202
REPORT_COLUMN; ;GROUP_SEQUENCE;"If the  report result renderer supports grouping of a result, this column defines the grouping columns and their order. Grouping is always only a display grouping without aggregations and with respect to paging counting the line without respect to the group, breaking up groups if neccessary. If itterating through the result a value of the group columns changes, the renderer finishes the current group and starts a new one, rendering the new grouping column values as group header. This requires, that all grouping columns are fixed specified as ORDER BY prefix. Dynamic sorting has always only effect INSIDE the groups (that means only follows this prefix inside the ORDER BY clause, e.g. ORDER BY groupcol1, groupcol2, [ORDERBY.default(""lastname, firstname"")]";202
REPORT_COLUMN; ;H_ALIGN;Alignment of displayed content (left, right, center, NULL);202
REPORT_COLUMN; ;INPUT_CATEGORY_CODE;"This code defines into which group (bucket) of input columns the input column belongs. The GUI can have different visualization styles / places for different buckets.  Example: areas could be Standard, that means “always visible”;   Additional, that means there typically is a button in the GUI where the user then can access the additional input columns; Left, if the GUI offers some input columns in a special area at the left of the page";202
REPORT_COLUMN; ;IO_TYPE;General type of the column: I for Input (by mask or drilldown), C for constant (value as DEFAULT), S for session (by the SESSION FIELD spec. Name) and O for Output. In general all column types can be used for drilldown links as source, only Input as drilldown destination.;202
REPORT_COLUMN; ;IS_CONTROL;This flag marks a column as technically obligatory for the presentation layer. It enforces delivery to the presentation layer, even though it is not positioned (market to be displayed to the user). Such coulumns are typically not displayed and are not used display selectable, like object_Ids...;202
REPORT_COLUMN; ;IS_OBLIGATORY;Flag, set to 1 if the input column is obligatory. If so and a drill down does not fill, it must be requested from the user. For input columns only.;202
REPORT_COLUMN; ;IS_ORDER_BY_ASC;used in connection with ORDER_BY_POS for ASCENDING or DESCENDING;202
REPORT_COLUMN; ;IS_RESULT;Only for magnifier reports, marks THE ONE result column specifying the result of the selection inside the magnifier report, e.g. the object_Id, Order_Number or Article_No;202
REPORT_COLUMN; ;IS_RESULT_LABEL;Only for magnifier reports, marks THE ONE result label column containing a e.g. text to be displayed on the searchmask, e.g. if the result coulmn itself is an object_Id (to show a meaningfull information to the user);202
REPORT_COLUMN; ;IS_SORTABLE;Flag, value 1, set to 0 if this column is not sortable. Typically Lookup-Columns, that are heavy to calculate and are only post calculated on a result page are marked NOT sortable. They are calculated AFTER sorting and paging and therefore can not be used for sorting.;202
REPORT_COLUMN; ;JOINS_COLUMN_ID;not used;202
REPORT_COLUMN; ;LOG_TYPE;Logical Type of the parameter (like known as logical types inside DCs - for formater/parser), i.e. QUANTITY, PRICE, etc.;202
REPORT_COLUMN; ;MASK_FIELD_CONSTRAINTS;Constraints (JASON notation) to configure the Input-Widget used to visualize this Input-Field;202
REPORT_COLUMN; ;MASK_FIELD_TYPE;Type of Widged to be used for the Input-Field, examples: SELECT, SELECTMULTI, DATE_MONTH, DATE_YEAR, LADROPDOWN... (see FLR_CONSTS. MASK_TYPE_*);202
REPORT_COLUMN; ;MULTI_VAL_DELIM;Delimiter for Lists of values if internally (inside FLR/FLF)lists of values must be passed as a single String, should not occur in the values itself.;202
REPORT_COLUMN; ;MULTI_VAL_MAX_COUNT;Max number of values that may be selected in multi value mode (depends on widget, used on multivalue widgets);202
REPORT_COLUMN; ;NAME;name of the Column in PL layers, e.g. key for lookup TRANSLATIONS.;202
REPORT_COLUMN; ;OBJECT_ID;Internal - Distinct identifier for every record.;202
REPORT_COLUMN; ;ORDER_BY_POS;mark columns, that are used in the default order of the SQL for visualization in result frontend, must be kept consistent with SQL template ORDER_BY fragment (if desired, but not yet implemented);202
REPORT_COLUMN; ;POSITION;Position in the report, when positioning automatically (null, to not automatically display);202
REPORT_COLUMN; ;QUERY_COLUMN;The name of the column in SQL context, inside the result set.;202
REPORT_COLUMN; ;REPORT_ID;Report, the parameter belongs to (null, if rep. indep. constant used by drilldown to fill input parm. of report);202
REPORT_COLUMN; ;SESSION_FIELD;"for  session columns (columns of IO_TYPE = S)  only, defines the field name inside the session to get the ""input"" value from";202
REPORT_COLUMN; ;SUMMARIZE;DEPRECATED, will never be implemented;202
REPORT_COLUMN; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";202
REPORT_COLUMN; ;USER_SELECTABLE;Flag, value 0, set to 1 if user is allowed to customize this column.;202
REPORT_COLUMN; ;VALUE_LIST_REPORT_ID;If a list of values should be available, this report will generate the list;202
REPORT_COLUMN; ;VALUE_LIST_REPORT_LINK_ID;Propper implementation of forwarding input columns to a magnifier input select report by a report link mapping these columns to input columns of the magnifier/select report;202
REPORT_COLUMN; ;VALUE_LIST_TEXT_TYPE;Internal - Key for lookup to DISPLAYTEXT table.;202
REPORT_FORMAT;TABLE; ;203 Defines the destination (Output/Display-Language-)Format of a Report, e.g. HTML, XML, Excel, PDF, …  This Table is PRIVATE!!!;203
REPORT_FORMAT; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;203
REPORT_FORMAT; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";203
REPORT_FORMAT; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);203
REPORT_FORMAT; ;CONFIG; optional Property-Settings for destination format specific additional settings;203
REPORT_FORMAT; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;203
REPORT_FORMAT; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;203
REPORT_FORMAT; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;203
REPORT_FORMAT; ;DESTINATION_FORMAT;Key identifying the destination format, e.g. HTML, XML, EXCEL, CSV, TEXT, JSON, PPT, PDF;203
REPORT_FORMAT; ;NAME; Name of the Format differentiating different implementations of the same destination format for different usecases.;203
REPORT_FORMAT; ;OBJECT_ID;Internal - Distinct identifier for every record.;203
REPORT_FORMAT; ;REPORT_ID; The objectId of the Report this ReportFormat defines a destination format for.;203
REPORT_FORMAT; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";203
REPORT_COLUMN_FORMAT;TABLE; ;204 Report Destination Format specific output definition for a column.  This Table is PRIVATE!!!;204
REPORT_COLUMN_FORMAT; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;204
REPORT_COLUMN_FORMAT; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";204
REPORT_COLUMN_FORMAT; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);204
REPORT_COLUMN_FORMAT; ;CONFIG; optional Property-Settings for destination format specific additional settings of the cell/column;204
REPORT_COLUMN_FORMAT; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;204
REPORT_COLUMN_FORMAT; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;204
REPORT_COLUMN_FORMAT; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;204
REPORT_COLUMN_FORMAT; ;DEFAULT_VALUE; formatted representation of an empty value (formatted using the destination format, e.g. containing HTML or XML);204
REPORT_COLUMN_FORMAT; ;DEFAULT_VALUE2; ??? formatted representation of an empty value (formatted using the destination format, e.g. containing HTML or XML) ??? For visualization of input coulumns, end values of ranges ???;204
REPORT_COLUMN_FORMAT; ;DESTINATION_FORMAT;Key identifying the destination format, e.g. HTML, XML, EXCEL, CSV, TEXT, JSON, PPT, PDF (for historical reasons this is additional to the same column in ReportFormat - ReportFormat was created much later than ReportColumnFormat);204
REPORT_COLUMN_FORMAT; ;DESTINATION_LINK_TEMPL;optional template to generate a link around the displayed result [FORMATTED_VALUE], replaces deprecated field in ReportColumn;204
REPORT_COLUMN_FORMAT; ;HEIGHT; an optional hight of the cell to display the column, value ranges depend on destination format;204
REPORT_COLUMN_FORMAT; ;HEIGHT_UOM; optional UnitOfMessure (e.g. percent, pixel, char) for the hight, depends on destination format;204
REPORT_COLUMN_FORMAT; ;MASK_FIELD_CONSTRAINTS;??? properties for configuring the mask field ??? What is the difference to config ??? Implemented ???;204
REPORT_COLUMN_FORMAT; ;MASK_FIELD_TYPE;??? Type of the widget to use for visualization, if different from standard widget for the type of field. ??? Implemented ???;204
REPORT_COLUMN_FORMAT; ;OBJECT_ID;Internal - Distinct identifier for every record.;204
REPORT_COLUMN_FORMAT; ;REPORT_COLUMN_ID;ObjectId of the ReportColumn, this ReportColumnFormat is related to.;204
REPORT_COLUMN_FORMAT; ;REPORT_FORMAT_ID;ObjectId of the ReportFormat, this ReportColumnFormat is related to.;204
REPORT_COLUMN_FORMAT; ;REPRESENTATION;"??? Template, creates a representation of the cell by e.g. combining values with their unit of messure. Therefor not only the column itself but also all other columns are accessible via template. The value of a column e.g. [CREATED] are also available in different states: raw [CREATED_$RAW] / [CREATED_$RAW_DT] , locale specific formatted [CREATED], destination format specific escaped [CREATED.format(""<format>"")]. The default is localized formatted and always available as [FORMATTED_VALUE], Also lookups and extended features via Template/TER-Plugins like DTEXT, DDTEXT, ... are available - see documentation ??? documentation of all plugins ???";204
REPORT_COLUMN_FORMAT; ;REPRESENTATION_CLASS;A project specific custom class used to create a representation of the cell/column (for creating very complex representations not possible in classic/generic way. This is very exceptional.;204
REPORT_COLUMN_FORMAT; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";204
REPORT_COLUMN_FORMAT; ;WIDTH; an optional width of the cell to display the column, value ranges depend on destination format;204
REPORT_COLUMN_FORMAT; ;WIDTH_UOM; optional UnitOfMessure (e.g. percent, pixel, char) for the width, depends on destination format;204
REPORT_LINK;TABLE; ;205 Links Reports to Sub/Drilldown-Reports, e.g. a Order-Report to a Orderline-Report listing the lines of a selected Order.  This Table is PRIVATE!!!;205
REPORT_LINK; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;205
REPORT_LINK; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";205
REPORT_LINK; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);205
REPORT_LINK; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;205
REPORT_LINK; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;205
REPORT_LINK; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;205
REPORT_LINK; ;MASTER_REPORT_ID;ObjectId of the Report used as master report (source).;205
REPORT_LINK; ;NAME;??? Name of the report linkuage used for visualization. ??? Translated ???;205
REPORT_LINK; ;OBJECT_ID;Internal - Distinct identifier for every record.;205
REPORT_LINK; ;SUB_REPORT_ID;ObjectId of the Report used as sub report (destination).;205
REPORT_LINK; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";205
REPORT_LINK_COLUMN;TABLE; ;206 connects input/output columns of a master report to input columns of a sub/Drilldown Report, forwarding key informations required as selection creterias required to select the right sub list.  This Table is PRIVATE!!!;206
REPORT_LINK_COLUMN; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;206
REPORT_LINK_COLUMN; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";206
REPORT_LINK_COLUMN; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);206
REPORT_LINK_COLUMN; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;206
REPORT_LINK_COLUMN; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;206
REPORT_LINK_COLUMN; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;206
REPORT_LINK_COLUMN; ;DEST_COLUMN_ID;Internal - Identifier for the destination (sub) REPORT_COLUMN.;206
REPORT_LINK_COLUMN; ;OBJECT_ID;Internal - Distinct identifier for every record.;206
REPORT_LINK_COLUMN; ;REPORT_LINK_ID;Internal - Identifier for REPORT_LINK.;206
REPORT_LINK_COLUMN; ;SOURCE_COLUMN_ID;Internal - Identifier for the source (master) REPORT_COLUMN.;206
REPORT_LINK_COLUMN; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";206
USER_REPORT;TABLE; ;207 Predefines settings of INPUT and/or OUTPUT columns to be used when executing reports for a user. Thes predefinitions my be defined by the application (global, for a mandant, a region and/or a variant of the report) or stored as a default by the user for e.g. presetting his search mask or automatically reexecuting a preconfigured report. This Table is PRIVATE!!!;207
USER_REPORT; ;CATEGORY;???;207
USER_REPORT; ;CATEGORY_AUTO_REPEAT_LASTDATE;???;207
USER_REPORT; ;CATEGORY_AUTO_REPEAT_NEXT;???;207
USER_REPORT; ;CATEGORY_AUTO_REPEAT_NEXT_MOD;???;207
USER_REPORT; ;CATEGORY_ID;???;207
USER_REPORT; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;207
USER_REPORT; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";207
USER_REPORT; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);207
USER_REPORT; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;207
USER_REPORT; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;207
USER_REPORT; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;207
USER_REPORT; ;CWID;CWID of user.;207
USER_REPORT; ;DESCRIPTION;Report description.;207
USER_REPORT; ;DIMENSION_KEYS_AUTOEXEC;Keys of Report Dimensions to execute automatically;207
USER_REPORT; ;DIMENSION_KEYS_MANUEXEC;Keys of Report Dimensions to, that can be additionally executed manually;207
USER_REPORT; ;HAS_INPUT;this defines, if the user report only defines search parameters (INPUT columns), or sorts/configures the result columns (OUTPUT columns) or both;207
USER_REPORT; ;HAS_OUTPUT;this defines, if the user report only defines search parameters (INPUT columns), or sorts/configures the result columns (OUTPUT columns) or both;207
USER_REPORT; ;HAS_STORED_B2S2;??? DEPRECATED (BayerONE) Flag, value 0, set to 1 if billto/shipto combination is stored.;207
USER_REPORT; ;IS_DEFAULT;True, if the User-Report is a default configuration for a Report (global-, variant-, region- or user-specific, predefines selecttion mask);207
USER_REPORT; ;IS_SYSTEM;True, if the User-Report is NOT user specific (predefined by the application and distributed /staged from e.g. QA to PROD);207
USER_REPORT; ;LAST_CHANGE_MAIL_SENT;??? For user independant task reports, send results by mails: last time the result was send (successfully ???) by mail;207
USER_REPORT; ;LINES_PER_PAGE;Lines per page, overules default lines per page of the report.;207
USER_REPORT; ;MANDANT;The mandant, this User-Report belongs to.;207
USER_REPORT; ;NAME;The name the User assigned to this stored Report.;207
USER_REPORT; ;OBJECT_ID;Internal - Distinct identifier for every record.;207
USER_REPORT; ;REGION;Region, this User-Report is assigned to.;207
USER_REPORT; ;REPORT_ID;The Report, this Report configuration is assigned to.;207
USER_REPORT; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";207
USER_REPORT; ;VARIANT;The Variant of this Report, e.g. SMALL, WIDE, EXTENDED…;207
USER_REPORT_COLUMN;TABLE; ;208 This table store the configuration of each column of a stored User-Report. This table is allowed to contain output columns ONLY if the User_Report has the IS_OUTPUT flag set. It is allowed to contain non-output-columns ONLY, if the User_Report has the IS_INPUT flag set.  This Table is PRIVATE!!!;208
USER_REPORT_COLUMN; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;208
USER_REPORT_COLUMN; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";208
USER_REPORT_COLUMN; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);208
USER_REPORT_COLUMN; ;COLUMN_ID;Internal - Identifier for REPORT_COLUMN.;208
USER_REPORT_COLUMN; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;208
USER_REPORT_COLUMN; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;208
USER_REPORT_COLUMN; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;208
USER_REPORT_COLUMN; ;CRITERION;Stored search criterion for input columns, the search value.;208
USER_REPORT_COLUMN; ;CRITERION_OP;"The Search-Operation to be used, selected from the list of ALLOWED_OPERATORS of the REPORT_COLUMN (for Columns of type Input); which operators are possible depends on the frontend widget, first operator is default, examples: NOT, !=, <, >, before, after, between, SK corona bundle names.";208
USER_REPORT_COLUMN; ;CRITERION2;Optional, the second search value, e.g. in case of ranges.;208
USER_REPORT_COLUMN; ;OBJECT_ID;Internal - Distinct identifier for every record.;208
USER_REPORT_COLUMN; ;POSITION;Position in the report, when positioning automatically in input masks OR results (null, to not automatically display);208
USER_REPORT_COLUMN; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";208
USER_REPORT_COLUMN; ;USER_REPORT_ID;Object_Id of the USER_REPORT, this USER_REPORT_COLUMN belongs to.;208
REPORT_FORMAT_OVERVIEW;VIEW; ;220 View to examine the right mapping from report, column and column format. For development support only. Allows to check, if assignments of REPORT_FORMAT_COLUMNS to REPORT_COLUMNS make sense.;220
REPORT_FORMAT_OVERVIEW; ;NAME;Name of report.;220
REPORT_FORMAT_OVERVIEW; ;POSITION;Position of column.;220
REPORT_FORMAT_OVERVIEW; ;QUERY_COLUMN;The name of the column to be querried.;220
REPORT_FORMAT_OVERVIEW; ;REPORT_COLUMN_FORMAT_ID;Internal - Identifier for REPORT_COLUMN_FORMAT.;220
REPORT_FORMAT_OVERVIEW; ;REPORT_COLUMN_ID;Internal - Identifier for REPORT_COLUMN.;220
REPORT_FORMAT_OVERVIEW; ;REPORT_ID;Internal - Identifier for REPORT.;220
REPORT_FORMAT_OVERVIEW; ;REPRESENTATION;Representation of column.;220
REPORT_LINK_OVERVIEW;VIEW; ;221 View to examine the right mapping from report links.  For development support only. Allows to verify, that Column linkages are consistent by column types and belong to the linked reports.;221
REPORT_LINK_OVERVIEW; ;MASTER_ERROR;Set if REPORT_LINK.MASTER_REPORT_ID not equal REPORT_COLUMN.REPORT_ID, both IDs are shown.;221
REPORT_LINK_OVERVIEW; ;REP_DST;Name of destination (sub) report.;221
REPORT_LINK_OVERVIEW; ;REP_DST_COL;Name of destination (sub) report column.;221
REPORT_LINK_OVERVIEW; ;REP_DST_COL_ID;Internal - Identifier for the destination (sub) REPORT_COLUMN.;221
REPORT_LINK_OVERVIEW; ;REP_DST_QCOL;The name of the destination (sub) report column to be querried.;221
REPORT_LINK_OVERVIEW; ;REP_LINK_ID;Internal - Identifier for REPORT_LINK.;221
REPORT_LINK_OVERVIEW; ;REP_LNK_COL_ID;Internal - Identifier for REPORT_LINK_COLUMN.;221
REPORT_LINK_OVERVIEW; ;REP_MAST_ID;Internal - Identifier for REPORT. Defines the master (source) report.;221
REPORT_LINK_OVERVIEW; ;REP_SRC;Name of source (master) report.;221
REPORT_LINK_OVERVIEW; ;REP_SRC_COL;Name of source (master) report column.;221
REPORT_LINK_OVERVIEW; ;REP_SRC_COL_ID;Internal - Identifier for the source (master) REPORT_COLUMN.;221
REPORT_LINK_OVERVIEW; ;REP_SRC_QCOL;The name of the source (master) report column to be querried.;221
REPORT_LINK_OVERVIEW; ;REP_SUB_ID;Internal - Identifier for REPORT. Defines the sub (destination) report.;221
REPORT_LINK_OVERVIEW; ;SUB_ERROR;Set if REPORT_LINK.SUB_REPORT_ID not equal REPORT_COLUMN.REPORT_ID, both IDs are shown.;221
REPORT_FORM;TABLE; ;240 DEPRECATED - Links Reports to Forms. Currently not used.;240
REPORT_FORM; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;240
REPORT_FORM; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";240
REPORT_FORM; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);240
REPORT_FORM; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;240
REPORT_FORM; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;240
REPORT_FORM; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;240
REPORT_FORM; ;FORM_ID;Internal - Identifier for FORM.;240
REPORT_FORM; ;OBJECT_ID;Internal - Distinct identifier for every record.;240
REPORT_FORM; ;REPORT_ID;Internal - Identifier for REPORT.;240
REPORT_FORM; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";240
COLUMN_REPORT_FORM;TABLE; ;241 DEPRECATED - Links Report_Columns to Report_Forms. Currently not used.;241
COLUMN_REPORT_FORM; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;241
COLUMN_REPORT_FORM; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";241
COLUMN_REPORT_FORM; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);241
COLUMN_REPORT_FORM; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;241
COLUMN_REPORT_FORM; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;241
COLUMN_REPORT_FORM; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;241
COLUMN_REPORT_FORM; ;OBJECT_ID;Internal - Distinct identifier for every record.;241
COLUMN_REPORT_FORM; ;REPORT_COLUMN_ID;Internal - Identifier for REPORT_COLUMN.;241
COLUMN_REPORT_FORM; ;REPORT_FORM_ID;Internal - Identifier for REPORT_FORM.;241
COLUMN_REPORT_FORM; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";241
FORM;TABLE; ;242 DEPRECATED - List of forms. Currently not used.;242
FORM; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;242
FORM; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";242
FORM; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);242
FORM; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;242
FORM; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;242
FORM; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;242
FORM; ;FORM_TYPE_ID; ;242
FORM; ;JSP_NAME; ;242
FORM; ;NAME; ;242
FORM; ;OBJECT_ID;Internal - Distinct identifier for every record.;242
FORM; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";242
FORM; ;VM_CODE; ;242
STATE_TRANSITION;TABLE; ;243 DEPRECATED - Transitions of forms. Currently not used.;243
STATE_TRANSITION; ;ACCESS_PROFILES; ;243
STATE_TRANSITION; ;CHANGED;The timestamp, the row was last touched at the (local) database, set by (CDT) trigger on any touch (NOT correlated to CHANGEDBY!!!) Create is the first change!!!;243
STATE_TRANSITION; ;CHANGEDBY;"The user CWID last changing this record, typically by application (correlated to the timestamp stored by ""userchanged"", may also contain a system cwid if backend processes are desired to set the field, too, storing their changes";243
STATE_TRANSITION; ;CHANGEDON;The server the record was last changed on by a user (only if changed by application);243
STATE_TRANSITION; ;CREATED;The timestamp the record is created at the local database (table), set/protected by (CDT) trigger.;243
STATE_TRANSITION; ;CREATEDBY;The cwid of the user creating the record. If created by a backend process (automatically), a system cwid should be used to identify. Protected by (CDT) Trigger.;243
STATE_TRANSITION; ;CREATEDON;The application server, the row was created on (if created by an application server), typically empty when created by a backend process. But backend processes may  set their own server identification, if desired. Protected by (CDT) Trigger.;243
STATE_TRANSITION; ;OBJECT_ID;Internal - Distinct identifier for every record.;243
STATE_TRANSITION; ;SOURCE_FORM_ID;Internal - Identifier for FORM.;243
STATE_TRANSITION; ;SOURCE_STATE; ;243
STATE_TRANSITION; ;TARGET_FORM_ID;Internal - Identifier for FORM.;243
STATE_TRANSITION; ;TARGET_STATE; ;243
STATE_TRANSITION; ;TRANSITION_EVENT; ;243
STATE_TRANSITION; ;USERCHANGED;"Timestamp the last time a user chaned (that means touched) a row via application, corelated to ""changedBy"". The change is trigged by the application server by telling the database, to set the timestamp to the current time. This is done by setting the userchanged to 9999-12-31 via DC (automatically, requires usage of UserChangeableDC. Timestamp finally set (or protected) by (CDT) Trigger. Manual assignemts of timestamps not possible due to full automatic handling of the field.";243
STATE_TRANSITION; ;VM_EVENT;Flag?;243
